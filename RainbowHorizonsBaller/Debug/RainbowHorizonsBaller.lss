
RainbowHorizonsBaller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00802000  000024b4  00002548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001031  00802060  00802060  000025a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00002648  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e962  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004cb8  00000000  00000000  0001129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006904  00000000  00000000  00015f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0001c858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f3e0  00000000  00000000  0001cf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c6b  00000000  00000000  0004c350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0004efbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b55b  00000000  00000000  0004f21b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	02 c1       	rjmp	.+516    	; 0x23e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	00 c1       	rjmp	.+512    	; 0x23e <__bad_interrupt>
      3e:	00 00       	nop
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c0       	rjmp	.+416    	; 0x23e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ce c0       	rjmp	.+412    	; 0x23e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cc c0       	rjmp	.+408    	; 0x23e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ca c0       	rjmp	.+404    	; 0x23e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_43>
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	90 c0       	rjmp	.+288    	; 0x23e <__bad_interrupt>
     11e:	00 00       	nop
     120:	8e c0       	rjmp	.+284    	; 0x23e <__bad_interrupt>
     122:	00 00       	nop
     124:	8c c0       	rjmp	.+280    	; 0x23e <__bad_interrupt>
     126:	00 00       	nop
     128:	8a c0       	rjmp	.+276    	; 0x23e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	84 c0       	rjmp	.+264    	; 0x23e <__bad_interrupt>
     136:	00 00       	nop
     138:	82 c0       	rjmp	.+260    	; 0x23e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	80 c0       	rjmp	.+256    	; 0x23e <__bad_interrupt>
     13e:	00 00       	nop
     140:	7e c0       	rjmp	.+252    	; 0x23e <__bad_interrupt>
     142:	00 00       	nop
     144:	7c c0       	rjmp	.+248    	; 0x23e <__bad_interrupt>
     146:	00 00       	nop
     148:	7a c0       	rjmp	.+244    	; 0x23e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	78 c0       	rjmp	.+240    	; 0x23e <__bad_interrupt>
     14e:	00 00       	nop
     150:	76 c0       	rjmp	.+236    	; 0x23e <__bad_interrupt>
     152:	00 00       	nop
     154:	74 c0       	rjmp	.+232    	; 0x23e <__bad_interrupt>
     156:	00 00       	nop
     158:	72 c0       	rjmp	.+228    	; 0x23e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	46 c0       	rjmp	.+140    	; 0x23e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	44 c0       	rjmp	.+136    	; 0x23e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	42 c0       	rjmp	.+132    	; 0x23e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	40 c0       	rjmp	.+128    	; 0x23e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3e c0       	rjmp	.+124    	; 0x23e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3c c0       	rjmp	.+120    	; 0x23e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e4 eb       	ldi	r30, 0xB4	; 180
     214:	f4 e2       	ldi	r31, 0x24	; 36
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 36       	cpi	r26, 0x60	; 96
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e3       	ldi	r18, 0x30	; 48
     228:	a0 e6       	ldi	r26, 0x60	; 96
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a1 39       	cpi	r26, 0x91	; 145
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <main>
     23a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	1f 92       	push	r1
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     24a:	80 91 6b 30 	lds	r24, 0x306B	; 0x80306b <stdio_base>
     24e:	90 91 6c 30 	lds	r25, 0x306C	; 0x80306c <stdio_base+0x1>
     252:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <__data_end>
     256:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <__data_end+0x1>
     25a:	be 01       	movw	r22, r28
     25c:	6f 5f       	subi	r22, 0xFF	; 255
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
     260:	19 95       	eicall
	return c;
     262:	89 81       	ldd	r24, Y+1	; 0x01
}
     264:	08 2e       	mov	r0, r24
     266:	00 0c       	add	r0, r0
     268:	99 0b       	sbc	r25, r25
     26a:	0f 90       	pop	r0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     272:	fc 01       	movw	r30, r24
     274:	91 81       	ldd	r25, Z+1	; 0x01
     276:	95 ff       	sbrs	r25, 5
     278:	fd cf       	rjmp	.-6      	; 0x274 <usart_putchar+0x2>
     27a:	60 83       	st	Z, r22
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	08 95       	ret

00000282 <usart_getchar>:
     282:	fc 01       	movw	r30, r24
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	99 23       	and	r25, r25
     288:	ec f7       	brge	.-6      	; 0x284 <usart_getchar+0x2>
     28a:	80 81       	ld	r24, Z
     28c:	08 95       	ret

0000028e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     28e:	4f 92       	push	r4
     290:	5f 92       	push	r5
     292:	6f 92       	push	r6
     294:	7f 92       	push	r7
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	7c 01       	movw	r14, r24
     2aa:	4a 01       	movw	r8, r20
     2ac:	5b 01       	movw	r10, r22
     2ae:	28 01       	movw	r4, r16
     2b0:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2b2:	fc 01       	movw	r30, r24
     2b4:	84 81       	ldd	r24, Z+4	; 0x04
     2b6:	82 ff       	sbrs	r24, 2
     2b8:	16 c0       	rjmp	.+44     	; 0x2e6 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2ba:	d9 01       	movw	r26, r18
     2bc:	c8 01       	movw	r24, r16
     2be:	68 94       	set
     2c0:	12 f8       	bld	r1, 2
     2c2:	b6 95       	lsr	r27
     2c4:	a7 95       	ror	r26
     2c6:	97 95       	ror	r25
     2c8:	87 95       	ror	r24
     2ca:	16 94       	lsr	r1
     2cc:	d1 f7       	brne	.-12     	; 0x2c2 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2ce:	b9 01       	movw	r22, r18
     2d0:	a8 01       	movw	r20, r16
     2d2:	03 2e       	mov	r0, r19
     2d4:	36 e1       	ldi	r19, 0x16	; 22
     2d6:	76 95       	lsr	r23
     2d8:	67 95       	ror	r22
     2da:	57 95       	ror	r21
     2dc:	47 95       	ror	r20
     2de:	3a 95       	dec	r19
     2e0:	d1 f7       	brne	.-12     	; 0x2d6 <usart_set_baudrate+0x48>
     2e2:	30 2d       	mov	r19, r0
     2e4:	15 c0       	rjmp	.+42     	; 0x310 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     2e6:	d9 01       	movw	r26, r18
     2e8:	c8 01       	movw	r24, r16
     2ea:	68 94       	set
     2ec:	13 f8       	bld	r1, 3
     2ee:	b6 95       	lsr	r27
     2f0:	a7 95       	ror	r26
     2f2:	97 95       	ror	r25
     2f4:	87 95       	ror	r24
     2f6:	16 94       	lsr	r1
     2f8:	d1 f7       	brne	.-12     	; 0x2ee <usart_set_baudrate+0x60>
		min_rate /= 2;
     2fa:	b9 01       	movw	r22, r18
     2fc:	a8 01       	movw	r20, r16
     2fe:	03 2e       	mov	r0, r19
     300:	37 e1       	ldi	r19, 0x17	; 23
     302:	76 95       	lsr	r23
     304:	67 95       	ror	r22
     306:	57 95       	ror	r21
     308:	47 95       	ror	r20
     30a:	3a 95       	dec	r19
     30c:	d1 f7       	brne	.-12     	; 0x302 <usart_set_baudrate+0x74>
     30e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     310:	88 15       	cp	r24, r8
     312:	99 05       	cpc	r25, r9
     314:	aa 05       	cpc	r26, r10
     316:	bb 05       	cpc	r27, r11
     318:	08 f4       	brcc	.+2      	; 0x31c <usart_set_baudrate+0x8e>
     31a:	a6 c0       	rjmp	.+332    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     31c:	84 16       	cp	r8, r20
     31e:	95 06       	cpc	r9, r21
     320:	a6 06       	cpc	r10, r22
     322:	b7 06       	cpc	r11, r23
     324:	08 f4       	brcc	.+2      	; 0x328 <usart_set_baudrate+0x9a>
     326:	a2 c0       	rjmp	.+324    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     328:	f7 01       	movw	r30, r14
     32a:	84 81       	ldd	r24, Z+4	; 0x04
     32c:	82 fd       	sbrc	r24, 2
     32e:	04 c0       	rjmp	.+8      	; 0x338 <usart_set_baudrate+0xaa>
		baud *= 2;
     330:	88 0c       	add	r8, r8
     332:	99 1c       	adc	r9, r9
     334:	aa 1c       	adc	r10, r10
     336:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     338:	c3 01       	movw	r24, r6
     33a:	b2 01       	movw	r22, r4
     33c:	a5 01       	movw	r20, r10
     33e:	94 01       	movw	r18, r8
     340:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     344:	2f 3f       	cpi	r18, 0xFF	; 255
     346:	31 05       	cpc	r19, r1
     348:	41 05       	cpc	r20, r1
     34a:	51 05       	cpc	r21, r1
     34c:	08 f4       	brcc	.+2      	; 0x350 <usart_set_baudrate+0xc2>
     34e:	90 c0       	rjmp	.+288    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	a0 e0       	ldi	r26, 0x00	; 0
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	c9 ef       	ldi	r28, 0xF9	; 249
     35a:	05 c0       	rjmp	.+10     	; 0x366 <usart_set_baudrate+0xd8>
     35c:	28 17       	cp	r18, r24
     35e:	39 07       	cpc	r19, r25
     360:	4a 07       	cpc	r20, r26
     362:	5b 07       	cpc	r21, r27
     364:	58 f0       	brcs	.+22     	; 0x37c <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	aa 1f       	adc	r26, r26
     36c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     36e:	cd 3f       	cpi	r28, 0xFD	; 253
     370:	0c f4       	brge	.+2      	; 0x374 <usart_set_baudrate+0xe6>
			limit |= 1;
     372:	81 60       	ori	r24, 0x01	; 1
     374:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     376:	c7 30       	cpi	r28, 0x07	; 7
     378:	89 f7       	brne	.-30     	; 0x35c <usart_set_baudrate+0xce>
     37a:	4f c0       	rjmp	.+158    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     37c:	cc 23       	and	r28, r28
     37e:	0c f0       	brlt	.+2      	; 0x382 <usart_set_baudrate+0xf4>
     380:	4c c0       	rjmp	.+152    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     382:	d5 01       	movw	r26, r10
     384:	c4 01       	movw	r24, r8
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	aa 1f       	adc	r26, r26
     38c:	bb 1f       	adc	r27, r27
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	aa 1f       	adc	r26, r26
     394:	bb 1f       	adc	r27, r27
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	aa 1f       	adc	r26, r26
     39c:	bb 1f       	adc	r27, r27
     39e:	48 1a       	sub	r4, r24
     3a0:	59 0a       	sbc	r5, r25
     3a2:	6a 0a       	sbc	r6, r26
     3a4:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3a6:	ce 3f       	cpi	r28, 0xFE	; 254
     3a8:	f4 f4       	brge	.+60     	; 0x3e6 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3aa:	8d ef       	ldi	r24, 0xFD	; 253
     3ac:	9f ef       	ldi	r25, 0xFF	; 255
     3ae:	8c 1b       	sub	r24, r28
     3b0:	91 09       	sbc	r25, r1
     3b2:	c7 fd       	sbrc	r28, 7
     3b4:	93 95       	inc	r25
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <usart_set_baudrate+0x132>
     3b8:	44 0c       	add	r4, r4
     3ba:	55 1c       	adc	r5, r5
     3bc:	66 1c       	adc	r6, r6
     3be:	77 1c       	adc	r7, r7
     3c0:	8a 95       	dec	r24
     3c2:	d2 f7       	brpl	.-12     	; 0x3b8 <usart_set_baudrate+0x12a>
     3c4:	d5 01       	movw	r26, r10
     3c6:	c4 01       	movw	r24, r8
     3c8:	b6 95       	lsr	r27
     3ca:	a7 95       	ror	r26
     3cc:	97 95       	ror	r25
     3ce:	87 95       	ror	r24
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	64 0d       	add	r22, r4
     3d6:	75 1d       	adc	r23, r5
     3d8:	86 1d       	adc	r24, r6
     3da:	97 1d       	adc	r25, r7
     3dc:	a5 01       	movw	r20, r10
     3de:	94 01       	movw	r18, r8
     3e0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__udivmodsi4>
     3e4:	37 c0       	rjmp	.+110    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		} else {
			baud <<= exp + 3;
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	8c 0f       	add	r24, r28
     3ea:	a5 01       	movw	r20, r10
     3ec:	94 01       	movw	r18, r8
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <usart_set_baudrate+0x16a>
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	44 1f       	adc	r20, r20
     3f6:	55 1f       	adc	r21, r21
     3f8:	8a 95       	dec	r24
     3fa:	d2 f7       	brpl	.-12     	; 0x3f0 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     3fc:	da 01       	movw	r26, r20
     3fe:	c9 01       	movw	r24, r18
     400:	b6 95       	lsr	r27
     402:	a7 95       	ror	r26
     404:	97 95       	ror	r25
     406:	87 95       	ror	r24
     408:	bc 01       	movw	r22, r24
     40a:	cd 01       	movw	r24, r26
     40c:	64 0d       	add	r22, r4
     40e:	75 1d       	adc	r23, r5
     410:	86 1d       	adc	r24, r6
     412:	97 1d       	adc	r25, r7
     414:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__udivmodsi4>
     418:	1d c0       	rjmp	.+58     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	8c 0f       	add	r24, r28
     41e:	a5 01       	movw	r20, r10
     420:	94 01       	movw	r18, r8
     422:	04 c0       	rjmp	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	44 1f       	adc	r20, r20
     42a:	55 1f       	adc	r21, r21
     42c:	8a 95       	dec	r24
     42e:	d2 f7       	brpl	.-12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		div = (cpu_hz + baud / 2) / baud - 1;
     430:	da 01       	movw	r26, r20
     432:	c9 01       	movw	r24, r18
     434:	b6 95       	lsr	r27
     436:	a7 95       	ror	r26
     438:	97 95       	ror	r25
     43a:	87 95       	ror	r24
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	64 0d       	add	r22, r4
     442:	75 1d       	adc	r23, r5
     444:	86 1d       	adc	r24, r6
     446:	97 1d       	adc	r25, r7
     448:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__udivmodsi4>
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	31 09       	sbc	r19, r1
     450:	41 09       	sbc	r20, r1
     452:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     454:	83 2f       	mov	r24, r19
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	c2 95       	swap	r28
     45a:	c0 7f       	andi	r28, 0xF0	; 240
     45c:	c8 2b       	or	r28, r24
     45e:	f7 01       	movw	r30, r14
     460:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     462:	26 83       	std	Z+6, r18	; 0x06

	return true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	18 c0       	rjmp	.+48     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	16 c0       	rjmp	.+44     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	14 c0       	rjmp	.+40     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     470:	d5 01       	movw	r26, r10
     472:	c4 01       	movw	r24, r8
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	aa 1f       	adc	r26, r26
     47a:	bb 1f       	adc	r27, r27
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	aa 1f       	adc	r26, r26
     482:	bb 1f       	adc	r27, r27
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	aa 1f       	adc	r26, r26
     48a:	bb 1f       	adc	r27, r27
     48c:	48 1a       	sub	r4, r24
     48e:	59 0a       	sbc	r5, r25
     490:	6a 0a       	sbc	r6, r26
     492:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     494:	c9 ef       	ldi	r28, 0xF9	; 249
     496:	89 cf       	rjmp	.-238    	; 0x3aa <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	bf 90       	pop	r11
     4a4:	af 90       	pop	r10
     4a6:	9f 90       	pop	r9
     4a8:	8f 90       	pop	r8
     4aa:	7f 90       	pop	r7
     4ac:	6f 90       	pop	r6
     4ae:	5f 90       	pop	r5
     4b0:	4f 90       	pop	r4
     4b2:	08 95       	ret

000004b4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <usart_init_rs232+0x12>
     4c4:	06 c1       	rjmp	.+524    	; 0x6d2 <usart_init_rs232+0x21e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4c6:	80 3c       	cpi	r24, 0xC0	; 192
     4c8:	91 05       	cpc	r25, r1
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4cc:	60 e1       	ldi	r22, 0x10	; 16
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     4d4:	fe c0       	rjmp	.+508    	; 0x6d2 <usart_init_rs232+0x21e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     4d6:	c1 15       	cp	r28, r1
     4d8:	84 e0       	ldi	r24, 0x04	; 4
     4da:	d8 07       	cpc	r29, r24
     4dc:	29 f4       	brne	.+10     	; 0x4e8 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     4de:	64 e0       	ldi	r22, 0x04	; 4
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     4e6:	f5 c0       	rjmp	.+490    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     4e8:	c0 38       	cpi	r28, 0x80	; 128
     4ea:	e1 e0       	ldi	r30, 0x01	; 1
     4ec:	de 07       	cpc	r29, r30
     4ee:	29 f4       	brne	.+10     	; 0x4fa <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     4f8:	ec c0       	rjmp	.+472    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     4fa:	c1 15       	cp	r28, r1
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	df 07       	cpc	r29, r31
     500:	29 f4       	brne	.+10     	; 0x50c <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     50a:	e3 c0       	rjmp	.+454    	; 0x6d2 <usart_init_rs232+0x21e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     50c:	c0 38       	cpi	r28, 0x80	; 128
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	d8 07       	cpc	r29, r24
     512:	29 f4       	brne	.+10     	; 0x51e <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     51c:	da c0       	rjmp	.+436    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     51e:	c0 39       	cpi	r28, 0x90	; 144
     520:	e3 e0       	ldi	r30, 0x03	; 3
     522:	de 07       	cpc	r29, r30
     524:	29 f4       	brne	.+10     	; 0x530 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     52e:	d1 c0       	rjmp	.+418    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     530:	c1 15       	cp	r28, r1
     532:	f2 e0       	ldi	r31, 0x02	; 2
     534:	df 07       	cpc	r29, r31
     536:	29 f4       	brne	.+10     	; 0x542 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     538:	62 e0       	ldi	r22, 0x02	; 2
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     540:	c8 c0       	rjmp	.+400    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     542:	c0 34       	cpi	r28, 0x40	; 64
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	d8 07       	cpc	r29, r24
     548:	29 f4       	brne	.+10     	; 0x554 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <sysclk_enable_module>
     552:	bf c0       	rjmp	.+382    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     554:	c0 32       	cpi	r28, 0x20	; 32
     556:	e3 e0       	ldi	r30, 0x03	; 3
     558:	de 07       	cpc	r29, r30
     55a:	21 f4       	brne	.+8      	; 0x564 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     55c:	64 e0       	ldi	r22, 0x04	; 4
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	f9 d7       	rcall	.+4082   	; 0x1554 <sysclk_enable_module>
     562:	b7 c0       	rjmp	.+366    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     564:	c1 15       	cp	r28, r1
     566:	f8 e0       	ldi	r31, 0x08	; 8
     568:	df 07       	cpc	r29, r31
     56a:	21 f4       	brne	.+8      	; 0x574 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	f1 d7       	rcall	.+4066   	; 0x1554 <sysclk_enable_module>
     572:	af c0       	rjmp	.+350    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     574:	c1 15       	cp	r28, r1
     576:	89 e0       	ldi	r24, 0x09	; 9
     578:	d8 07       	cpc	r29, r24
     57a:	21 f4       	brne	.+8      	; 0x584 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	e9 d7       	rcall	.+4050   	; 0x1554 <sysclk_enable_module>
     582:	a7 c0       	rjmp	.+334    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     584:	c1 15       	cp	r28, r1
     586:	ea e0       	ldi	r30, 0x0A	; 10
     588:	de 07       	cpc	r29, r30
     58a:	21 f4       	brne	.+8      	; 0x594 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	85 e0       	ldi	r24, 0x05	; 5
     590:	e1 d7       	rcall	.+4034   	; 0x1554 <sysclk_enable_module>
     592:	9f c0       	rjmp	.+318    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     594:	c1 15       	cp	r28, r1
     596:	fb e0       	ldi	r31, 0x0B	; 11
     598:	df 07       	cpc	r29, r31
     59a:	21 f4       	brne	.+8      	; 0x5a4 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	d9 d7       	rcall	.+4018   	; 0x1554 <sysclk_enable_module>
     5a2:	97 c0       	rjmp	.+302    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     5a4:	c0 34       	cpi	r28, 0x40	; 64
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	d8 07       	cpc	r29, r24
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	d1 d7       	rcall	.+4002   	; 0x1554 <sysclk_enable_module>
     5b2:	8f c0       	rjmp	.+286    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     5b4:	c0 34       	cpi	r28, 0x40	; 64
     5b6:	e9 e0       	ldi	r30, 0x09	; 9
     5b8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     5ba:	21 f4       	brne	.+8      	; 0x5c4 <usart_init_rs232+0x110>
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	c9 d7       	rcall	.+3986   	; 0x1554 <sysclk_enable_module>
     5c2:	87 c0       	rjmp	.+270    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     5c4:	c0 34       	cpi	r28, 0x40	; 64
     5c6:	fa e0       	ldi	r31, 0x0A	; 10
     5c8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     5ca:	21 f4       	brne	.+8      	; 0x5d4 <usart_init_rs232+0x120>
     5cc:	62 e0       	ldi	r22, 0x02	; 2
     5ce:	85 e0       	ldi	r24, 0x05	; 5
     5d0:	c1 d7       	rcall	.+3970   	; 0x1554 <sysclk_enable_module>
     5d2:	7f c0       	rjmp	.+254    	; 0x6d2 <usart_init_rs232+0x21e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     5d4:	c0 39       	cpi	r28, 0x90	; 144
     5d6:	88 e0       	ldi	r24, 0x08	; 8
     5d8:	d8 07       	cpc	r29, r24
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     5da:	21 f4       	brne	.+8      	; 0x5e4 <usart_init_rs232+0x130>
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	b9 d7       	rcall	.+3954   	; 0x1554 <sysclk_enable_module>
     5e2:	77 c0       	rjmp	.+238    	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     5e4:	c0 39       	cpi	r28, 0x90	; 144
     5e6:	e9 e0       	ldi	r30, 0x09	; 9
     5e8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <usart_init_rs232+0x140>
     5ec:	64 e0       	ldi	r22, 0x04	; 4
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	b1 d7       	rcall	.+3938   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     5f2:	6f c0       	rjmp	.+222    	; 0x6d2 <usart_init_rs232+0x21e>
     5f4:	c0 39       	cpi	r28, 0x90	; 144
     5f6:	fa e0       	ldi	r31, 0x0A	; 10
     5f8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     5fa:	21 f4       	brne	.+8      	; 0x604 <usart_init_rs232+0x150>
     5fc:	64 e0       	ldi	r22, 0x04	; 4
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	a9 d7       	rcall	.+3922   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     602:	67 c0       	rjmp	.+206    	; 0x6d2 <usart_init_rs232+0x21e>
     604:	c0 39       	cpi	r28, 0x90	; 144
     606:	8b e0       	ldi	r24, 0x0B	; 11
     608:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     60a:	21 f4       	brne	.+8      	; 0x614 <usart_init_rs232+0x160>
     60c:	64 e0       	ldi	r22, 0x04	; 4
     60e:	86 e0       	ldi	r24, 0x06	; 6
     610:	a1 d7       	rcall	.+3906   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     612:	5f c0       	rjmp	.+190    	; 0x6d2 <usart_init_rs232+0x21e>
     614:	c0 3c       	cpi	r28, 0xC0	; 192
     616:	e8 e0       	ldi	r30, 0x08	; 8
     618:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     61a:	21 f4       	brne	.+8      	; 0x624 <usart_init_rs232+0x170>
     61c:	68 e0       	ldi	r22, 0x08	; 8
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	99 d7       	rcall	.+3890   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     622:	57 c0       	rjmp	.+174    	; 0x6d2 <usart_init_rs232+0x21e>
     624:	c0 3c       	cpi	r28, 0xC0	; 192
     626:	f9 e0       	ldi	r31, 0x09	; 9
     628:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     62a:	21 f4       	brne	.+8      	; 0x634 <usart_init_rs232+0x180>
     62c:	68 e0       	ldi	r22, 0x08	; 8
     62e:	84 e0       	ldi	r24, 0x04	; 4
     630:	91 d7       	rcall	.+3874   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     632:	4f c0       	rjmp	.+158    	; 0x6d2 <usart_init_rs232+0x21e>
     634:	c0 3c       	cpi	r28, 0xC0	; 192
     636:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     638:	d8 07       	cpc	r29, r24
     63a:	21 f4       	brne	.+8      	; 0x644 <usart_init_rs232+0x190>
     63c:	68 e0       	ldi	r22, 0x08	; 8
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	89 d7       	rcall	.+3858   	; 0x1554 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     642:	47 c0       	rjmp	.+142    	; 0x6d2 <usart_init_rs232+0x21e>
     644:	c0 3a       	cpi	r28, 0xA0	; 160
     646:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     648:	de 07       	cpc	r29, r30
     64a:	21 f4       	brne	.+8      	; 0x654 <usart_init_rs232+0x1a0>
     64c:	60 e1       	ldi	r22, 0x10	; 16
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	81 d7       	rcall	.+3842   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     652:	3f c0       	rjmp	.+126    	; 0x6d2 <usart_init_rs232+0x21e>
     654:	c0 3a       	cpi	r28, 0xA0	; 160
     656:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     658:	df 07       	cpc	r29, r31
     65a:	21 f4       	brne	.+8      	; 0x664 <usart_init_rs232+0x1b0>
     65c:	60 e1       	ldi	r22, 0x10	; 16
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	79 d7       	rcall	.+3826   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     662:	37 c0       	rjmp	.+110    	; 0x6d2 <usart_init_rs232+0x21e>
     664:	c0 3a       	cpi	r28, 0xA0	; 160
     666:	8a e0       	ldi	r24, 0x0A	; 10
     668:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     66a:	21 f4       	brne	.+8      	; 0x674 <usart_init_rs232+0x1c0>
     66c:	60 e1       	ldi	r22, 0x10	; 16
     66e:	85 e0       	ldi	r24, 0x05	; 5
     670:	71 d7       	rcall	.+3810   	; 0x1554 <sysclk_enable_module>
     672:	2f c0       	rjmp	.+94     	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     674:	c0 3a       	cpi	r28, 0xA0	; 160
     676:	eb e0       	ldi	r30, 0x0B	; 11
     678:	de 07       	cpc	r29, r30
     67a:	21 f4       	brne	.+8      	; 0x684 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     67c:	60 e1       	ldi	r22, 0x10	; 16
     67e:	86 e0       	ldi	r24, 0x06	; 6
     680:	69 d7       	rcall	.+3794   	; 0x1554 <sysclk_enable_module>
     682:	27 c0       	rjmp	.+78     	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     684:	c0 3b       	cpi	r28, 0xB0	; 176
     686:	f8 e0       	ldi	r31, 0x08	; 8
     688:	df 07       	cpc	r29, r31
     68a:	21 f4       	brne	.+8      	; 0x694 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     68c:	60 e2       	ldi	r22, 0x20	; 32
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	61 d7       	rcall	.+3778   	; 0x1554 <sysclk_enable_module>
     692:	1f c0       	rjmp	.+62     	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     694:	c0 3b       	cpi	r28, 0xB0	; 176
     696:	89 e0       	ldi	r24, 0x09	; 9
     698:	d8 07       	cpc	r29, r24
     69a:	21 f4       	brne	.+8      	; 0x6a4 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     69c:	60 e2       	ldi	r22, 0x20	; 32
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	59 d7       	rcall	.+3762   	; 0x1554 <sysclk_enable_module>
     6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <usart_init_rs232+0x21e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     6a4:	c0 3b       	cpi	r28, 0xB0	; 176
     6a6:	ea e0       	ldi	r30, 0x0A	; 10
     6a8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <usart_init_rs232+0x200>
     6ac:	60 e2       	ldi	r22, 0x20	; 32
     6ae:	85 e0       	ldi	r24, 0x05	; 5
     6b0:	51 d7       	rcall	.+3746   	; 0x1554 <sysclk_enable_module>
     6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <usart_init_rs232+0x21e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     6b4:	c0 38       	cpi	r28, 0x80	; 128
     6b6:	f4 e0       	ldi	r31, 0x04	; 4
     6b8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <usart_init_rs232+0x210>
     6bc:	60 e4       	ldi	r22, 0x40	; 64
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	49 d7       	rcall	.+3730   	; 0x1554 <sysclk_enable_module>
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <usart_init_rs232+0x21e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     6c4:	c0 3a       	cpi	r28, 0xA0	; 160
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <usart_init_rs232+0x21e>
     6cc:	60 e4       	ldi	r22, 0x40	; 64
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	41 d7       	rcall	.+3714   	; 0x1554 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     6d2:	8d 81       	ldd	r24, Y+5	; 0x05
     6d4:	8f 73       	andi	r24, 0x3F	; 63
     6d6:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     6d8:	f8 01       	movw	r30, r16
     6da:	95 81       	ldd	r25, Z+5	; 0x05
     6dc:	84 81       	ldd	r24, Z+4	; 0x04
     6de:	89 2b       	or	r24, r25
     6e0:	96 81       	ldd	r25, Z+6	; 0x06
     6e2:	91 11       	cpse	r25, r1
     6e4:	98 e0       	ldi	r25, 0x08	; 8
     6e6:	89 2b       	or	r24, r25
     6e8:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     6ea:	f8 01       	movw	r30, r16
     6ec:	40 81       	ld	r20, Z
     6ee:	51 81       	ldd	r21, Z+1	; 0x01
     6f0:	62 81       	ldd	r22, Z+2	; 0x02
     6f2:	73 81       	ldd	r23, Z+3	; 0x03
     6f4:	00 e0       	ldi	r16, 0x00	; 0
     6f6:	18 e4       	ldi	r17, 0x48	; 72
     6f8:	28 ee       	ldi	r18, 0xE8	; 232
     6fa:	31 e0       	ldi	r19, 0x01	; 1
     6fc:	ce 01       	movw	r24, r28
     6fe:	c7 dd       	rcall	.-1138   	; 0x28e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	98 60       	ori	r25, 0x08	; 8
     704:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     706:	9c 81       	ldd	r25, Y+4	; 0x04
     708:	90 61       	ori	r25, 0x10	; 16
     70a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	08 95       	ret

00000716 <__portable_avr_delay_cycles>:
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
}
     716:	04 c0       	rjmp	.+8      	; 0x720 <__portable_avr_delay_cycles+0xa>
     718:	61 50       	subi	r22, 0x01	; 1
     71a:	71 09       	sbc	r23, r1
     71c:	81 09       	sbc	r24, r1
     71e:	91 09       	sbc	r25, r1
     720:	61 15       	cp	r22, r1
     722:	71 05       	cpc	r23, r1
     724:	81 05       	cpc	r24, r1
     726:	91 05       	cpc	r25, r1
     728:	b9 f7       	brne	.-18     	; 0x718 <__portable_avr_delay_cycles+0x2>
     72a:	08 95       	ret

0000072c <read16>:
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	8c 01       	movw	r16, r24
     736:	39 d4       	rcall	.+2162   	; 0xfaa <spiread>
     738:	c8 2f       	mov	r28, r24
     73a:	d0 e0       	ldi	r29, 0x00	; 0
     73c:	dc 2f       	mov	r29, r28
     73e:	cc 27       	eor	r28, r28
     740:	c8 01       	movw	r24, r16
     742:	33 d4       	rcall	.+2150   	; 0xfaa <spiread>
     744:	9e 01       	movw	r18, r28
     746:	28 2b       	or	r18, r24
     748:	c9 01       	movw	r24, r18
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <read24>:
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	23 d4       	rcall	.+2118   	; 0xfaa <spiread>
     764:	c8 2e       	mov	r12, r24
     766:	d1 2c       	mov	r13, r1
     768:	e1 2c       	mov	r14, r1
     76a:	f1 2c       	mov	r15, r1
     76c:	76 01       	movw	r14, r12
     76e:	dd 24       	eor	r13, r13
     770:	cc 24       	eor	r12, r12
     772:	ce 01       	movw	r24, r28
     774:	1a d4       	rcall	.+2100   	; 0xfaa <spiread>
     776:	d8 2a       	or	r13, r24
     778:	ce 01       	movw	r24, r28
     77a:	17 d4       	rcall	.+2094   	; 0xfaa <spiread>
     77c:	a7 01       	movw	r20, r14
     77e:	96 01       	movw	r18, r12
     780:	28 2b       	or	r18, r24
     782:	ca 01       	movw	r24, r20
     784:	b9 01       	movw	r22, r18
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	08 95       	ret

00000794 <define_new_MS56XX_default_OSR>:
	MS56XX_t pressure_sensor;
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
     798:	41 83       	std	Z+1, r20	; 0x01
     79a:	52 83       	std	Z+2, r21	; 0x02
     79c:	63 83       	std	Z+3, r22	; 0x03
     79e:	15 86       	std	Z+13, r1	; 0x0d
}

MS56XX_t define_new_MS56XX_default_OSR(SENSOR_TYPE model, SPI_t* spi, ioport_pin_t select_pin)
{
	return define_new_MS56XX(model, spi, select_pin, OSR_4096); //Default to highest oversampling rate if not provided
}
     7a0:	08 95       	ret

000007a2 <pressureSensorReset>:

void pressureSensorReset(MS56XX_t* sensor)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	ec 01       	movw	r28, r24
	spiselect(sensor->select_pin);
     7a8:	88 81       	ld	r24, Y
     7aa:	0d d4       	rcall	.+2074   	; 0xfc6 <spiselect>
	spiwrite(sensor->spi, 0b00011110);
     7ac:	6e e1       	ldi	r22, 0x1E	; 30
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	03 d4       	rcall	.+2054   	; 0xfba <spiwrite>
	delay_ms(5);
     7b4:	6b e2       	ldi	r22, 0x2B	; 43
     7b6:	78 e6       	ldi	r23, 0x68	; 104
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
	spideselect(sensor->select_pin);
     7bc:	ac df       	rcall	.-168    	; 0x716 <__portable_avr_delay_cycles>
     7be:	88 81       	ld	r24, Y
     7c0:	16 d4       	rcall	.+2092   	; 0xfee <spideselect>
	delay_ms(1);
     7c2:	66 ed       	ldi	r22, 0xD6	; 214
     7c4:	74 e1       	ldi	r23, 0x14	; 20
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a5 df       	rcall	.-182    	; 0x716 <__portable_avr_delay_cycles>
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <calibratePressureSensor>:

void calibratePressureSensor(MS56XX_t* sensor)
//Set up the appropriate SPI before calling this
{
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	pressureSensorReset(sensor);
     7d8:	e4 df       	rcall	.-56     	; 0x7a2 <pressureSensorReset>
	
	//Get all the lovely little calibration constants
	spiselect(sensor->select_pin);
     7da:	88 81       	ld	r24, Y
     7dc:	f4 d3       	rcall	.+2024   	; 0xfc6 <spiselect>
	spiwrite(sensor->spi, 0b10100010); //Bits 1 - 3 are 001, for C1
     7de:	62 ea       	ldi	r22, 0xA2	; 162
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	ea d3       	rcall	.+2004   	; 0xfba <spiwrite>
	sensor->SENSt1 = read16(sensor->spi);
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	a0 df       	rcall	.-192    	; 0x72c <read16>
     7ec:	8e 87       	std	Y+14, r24	; 0x0e
     7ee:	9f 87       	std	Y+15, r25	; 0x0f
	spideselect(sensor->select_pin);
     7f0:	88 81       	ld	r24, Y
     7f2:	fd d3       	rcall	.+2042   	; 0xfee <spideselect>
     7f4:	88 81       	ld	r24, Y

	spiselect(sensor->select_pin);
     7f6:	e7 d3       	rcall	.+1998   	; 0xfc6 <spiselect>
     7f8:	64 ea       	ldi	r22, 0xA4	; 164
	spiwrite(sensor->spi, 0b10100100); //010 = 2, for C2
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	dd d3       	rcall	.+1978   	; 0xfba <spiwrite>
     800:	89 81       	ldd	r24, Y+1	; 0x01
	sensor->OFFt1 = read16(sensor->spi);
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	93 df       	rcall	.-218    	; 0x72c <read16>
     806:	88 8b       	std	Y+16, r24	; 0x10
     808:	99 8b       	std	Y+17, r25	; 0x11
     80a:	88 81       	ld	r24, Y
	spideselect(sensor->select_pin);
     80c:	f0 d3       	rcall	.+2016   	; 0xfee <spideselect>
     80e:	88 81       	ld	r24, Y

	spiselect(sensor->select_pin);
     810:	da d3       	rcall	.+1972   	; 0xfc6 <spiselect>
     812:	66 ea       	ldi	r22, 0xA6	; 166
     814:	89 81       	ldd	r24, Y+1	; 0x01
	spiwrite(sensor->spi, 0b10100110); // 011 = 3, for C3
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	d0 d3       	rcall	.+1952   	; 0xfba <spiwrite>
     81a:	89 81       	ldd	r24, Y+1	; 0x01
	sensor->TCS = read16(sensor->spi);
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	86 df       	rcall	.-244    	; 0x72c <read16>
     820:	8a 8b       	std	Y+18, r24	; 0x12
     822:	9b 8b       	std	Y+19, r25	; 0x13
	spideselect(sensor->select_pin);
     824:	88 81       	ld	r24, Y
     826:	e3 d3       	rcall	.+1990   	; 0xfee <spideselect>

	spiselect(sensor->select_pin);
     828:	88 81       	ld	r24, Y
     82a:	cd d3       	rcall	.+1946   	; 0xfc6 <spiselect>
	spiwrite(sensor->spi, 0b10101000); // 100 = 4
     82c:	68 ea       	ldi	r22, 0xA8	; 168
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	c3 d3       	rcall	.+1926   	; 0xfba <spiwrite>
	sensor->TCO = read16(sensor->spi);
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	79 df       	rcall	.-270    	; 0x72c <read16>
     83a:	8c 8b       	std	Y+20, r24	; 0x14
	spideselect(sensor->select_pin);
     83c:	9d 8b       	std	Y+21, r25	; 0x15
     83e:	88 81       	ld	r24, Y

	spiselect(sensor->select_pin);
     840:	d6 d3       	rcall	.+1964   	; 0xfee <spideselect>
     842:	88 81       	ld	r24, Y
	spiwrite(sensor->spi, 0b10101010); // 101 = 5
     844:	c0 d3       	rcall	.+1920   	; 0xfc6 <spiselect>
     846:	6a ea       	ldi	r22, 0xAA	; 170
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
	sensor->Tref = read16(sensor->spi);
     84c:	b6 d3       	rcall	.+1900   	; 0xfba <spiwrite>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	6c df       	rcall	.-296    	; 0x72c <read16>
     854:	8e 8b       	std	Y+22, r24	; 0x16
	spideselect(sensor->select_pin);
     856:	9f 8b       	std	Y+23, r25	; 0x17
     858:	88 81       	ld	r24, Y
     85a:	c9 d3       	rcall	.+1938   	; 0xfee <spideselect>


	spiselect(sensor->select_pin);
     85c:	88 81       	ld	r24, Y
     85e:	b3 d3       	rcall	.+1894   	; 0xfc6 <spiselect>
     860:	6c ea       	ldi	r22, 0xAC	; 172
	spiwrite(sensor->spi, 0b10101100); // 110 = 6
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	a9 d3       	rcall	.+1874   	; 0xfba <spiwrite>
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
	sensor->TEMPSENS = read16(sensor->spi);
     86c:	5f df       	rcall	.-322    	; 0x72c <read16>
     86e:	88 8f       	std	Y+24, r24	; 0x18
     870:	99 8f       	std	Y+25, r25	; 0x19
     872:	88 81       	ld	r24, Y
     874:	bc d3       	rcall	.+1912   	; 0xfee <spideselect>
     876:	df 91       	pop	r29
	spideselect(sensor->select_pin);
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <get_read_info>:
     87c:	82 30       	cpi	r24, 0x02	; 2
			sensor->OFFt1, 
			sensor->TCS, 
			sensor->TCO, 
			sensor->Tref, 
			sensor->TEMPSENS);*/
}
     87e:	29 f1       	breq	.+74     	; 0x8ca <get_read_info+0x4e>
     880:	28 f4       	brcc	.+10     	; 0x88c <get_read_info+0x10>
     882:	88 23       	and	r24, r24
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
 }
 
 uint8_t get_read_info(OSR_Settings osr, uint8_t* D1_read_cmd, uint8_t* D2_read_cmd, uint16_t* delay_time_us)
 {
	 switch (osr)
     884:	41 f0       	breq	.+16     	; 0x896 <get_read_info+0x1a>
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	99 f0       	breq	.+38     	; 0x8b0 <get_read_info+0x34>
     88a:	46 c0       	rjmp	.+140    	; 0x918 <get_read_info+0x9c>
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	51 f1       	breq	.+84     	; 0x8e4 <get_read_info+0x68>
     890:	84 30       	cpi	r24, 0x04	; 4
     892:	a9 f1       	breq	.+106    	; 0x8fe <get_read_info+0x82>
     894:	41 c0       	rjmp	.+130    	; 0x918 <get_read_info+0x9c>
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
     896:	88 e4       	ldi	r24, 0x48	; 72
     898:	fb 01       	movw	r30, r22
     89a:	80 83       	st	Z, r24
			*D2_read_cmd = 0x58;
     89c:	88 e5       	ldi	r24, 0x58	; 88
     89e:	fa 01       	movw	r30, r20
     8a0:	80 83       	st	Z, r24
			*delay_time_us = 9040;
     8a2:	80 e5       	ldi	r24, 0x50	; 80
     8a4:	93 e2       	ldi	r25, 0x23	; 35
     8a6:	f9 01       	movw	r30, r18
     8a8:	80 83       	st	Z, r24
     8aa:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     8ac:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
			*D2_read_cmd = 0x58;
			*delay_time_us = 9040;
			break;
     8ae:	08 95       	ret
		case OSR_2048:
			*D1_read_cmd = 0x46;
     8b0:	86 e4       	ldi	r24, 0x46	; 70
     8b2:	fb 01       	movw	r30, r22
     8b4:	80 83       	st	Z, r24
			*D2_read_cmd = 0x56;
     8b6:	86 e5       	ldi	r24, 0x56	; 86
     8b8:	fa 01       	movw	r30, r20
     8ba:	80 83       	st	Z, r24
			*delay_time_us = 4540;
     8bc:	8c eb       	ldi	r24, 0xBC	; 188
     8be:	91 e1       	ldi	r25, 0x11	; 17
     8c0:	f9 01       	movw	r30, r18
     8c2:	80 83       	st	Z, r24
     8c4:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     8c6:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_2048:
			*D1_read_cmd = 0x46;
			*D2_read_cmd = 0x56;
			*delay_time_us = 4540;
			break;
     8c8:	08 95       	ret
		case OSR_1024:
			*D1_read_cmd = 0x44;
     8ca:	84 e4       	ldi	r24, 0x44	; 68
     8cc:	fb 01       	movw	r30, r22
     8ce:	80 83       	st	Z, r24
			*D2_read_cmd = 0x54;
     8d0:	84 e5       	ldi	r24, 0x54	; 84
     8d2:	fa 01       	movw	r30, r20
     8d4:	80 83       	st	Z, r24
			*delay_time_us = 2280;
     8d6:	88 ee       	ldi	r24, 0xE8	; 232
     8d8:	98 e0       	ldi	r25, 0x08	; 8
     8da:	f9 01       	movw	r30, r18
     8dc:	80 83       	st	Z, r24
     8de:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     8e0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_1024:
			*D1_read_cmd = 0x44;
			*D2_read_cmd = 0x54;
			*delay_time_us = 2280;
			break;
     8e2:	08 95       	ret
		case OSR_512:
			*D1_read_cmd = 0x42;
     8e4:	82 e4       	ldi	r24, 0x42	; 66
     8e6:	fb 01       	movw	r30, r22
     8e8:	80 83       	st	Z, r24
			*D2_read_cmd = 0x52;
     8ea:	82 e5       	ldi	r24, 0x52	; 82
     8ec:	fa 01       	movw	r30, r20
     8ee:	80 83       	st	Z, r24
			*delay_time_us = 1170;
     8f0:	82 e9       	ldi	r24, 0x92	; 146
     8f2:	94 e0       	ldi	r25, 0x04	; 4
     8f4:	f9 01       	movw	r30, r18
     8f6:	80 83       	st	Z, r24
     8f8:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     8fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_512:
			*D1_read_cmd = 0x42;
			*D2_read_cmd = 0x52;
			*delay_time_us = 1170;
			break;
     8fc:	08 95       	ret
		case OSR_256:
			*D1_read_cmd = 0x40;
     8fe:	80 e4       	ldi	r24, 0x40	; 64
     900:	fb 01       	movw	r30, r22
     902:	80 83       	st	Z, r24
			*D2_read_cmd = 0x50;
     904:	80 e5       	ldi	r24, 0x50	; 80
     906:	fa 01       	movw	r30, r20
     908:	80 83       	st	Z, r24
			*delay_time_us = 600;
     90a:	88 e5       	ldi	r24, 0x58	; 88
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	f9 01       	movw	r30, r18
     910:	80 83       	st	Z, r24
     912:	91 83       	std	Z+1, r25	; 0x01
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     914:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_256:
			*D1_read_cmd = 0x40;
			*D2_read_cmd = 0x50;
			*delay_time_us = 600;
			break;
     916:	08 95       	ret
		default:
			return 1; //Error
     918:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 return 0; //Success
 }
     91a:	08 95       	ret

0000091c <readMS56XX>:
			sensor->TEMPSENS);*/
}


void readMS56XX(MS56XX_t* sensor)
 {
     91c:	2f 92       	push	r2
     91e:	3f 92       	push	r3
     920:	4f 92       	push	r4
     922:	5f 92       	push	r5
     924:	6f 92       	push	r6
     926:	7f 92       	push	r7
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	e5 97       	sbiw	r28, 0x35	; 53
     946:	cd bf       	out	0x3d, r28	; 61
     948:	de bf       	out	0x3e, r29	; 62
     94a:	4c 01       	movw	r8, r24
	uint32_t rawPressure = 0; //D1
	uint32_t rawTemp = 0; //D2
	
	//Assume data is valid unless any of the cases checked for are met
	sensor->data.valid = 1;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	d4 01       	movw	r26, r8
     950:	1c 96       	adiw	r26, 0x0c	; 12
     952:	8c 93       	st	X, r24
     954:	1c 97       	sbiw	r26, 0x0c	; 12
	
	uint16_t delay_time;
	uint8_t D1_cmd, D2_cmd;
	if (get_read_info(sensor->osr, &D1_cmd, &D2_cmd, &delay_time)) //Return flag of 1 = OSR not supported
     956:	9e 01       	movw	r18, r28
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	ae 01       	movw	r20, r28
     95e:	4c 5f       	subi	r20, 0xFC	; 252
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	be 01       	movw	r22, r28
     964:	6d 5f       	subi	r22, 0xFD	; 253
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	1d 96       	adiw	r26, 0x0d	; 13
     96a:	8c 91       	ld	r24, X
     96c:	87 df       	rcall	.-242    	; 0x87c <get_read_info>
     96e:	88 23       	and	r24, r24
     970:	19 f0       	breq	.+6      	; 0x978 <readMS56XX+0x5c>
	{
		//Mark data as invalid and exit function
		sensor->data.valid = 0;
     972:	f4 01       	movw	r30, r8
     974:	14 86       	std	Z+12, r1	; 0x0c
		return;
     976:	03 c3       	rjmp	.+1542   	; 0xf7e <readMS56XX+0x662>
	}
	//If get_read_info succeeded, D1_cmd, D2_cmd, and delay_time will now have the appropriate values for the selected OSR

	//Ask for raw pressure, 4096 OSR
	spiselect(sensor->select_pin);
     978:	d4 01       	movw	r26, r8
     97a:	8c 91       	ld	r24, X
     97c:	24 d3       	rcall	.+1608   	; 0xfc6 <spiselect>
	spiwrite(sensor->spi, D1_cmd);
     97e:	6b 81       	ldd	r22, Y+3	; 0x03
     980:	f4 01       	movw	r30, r8
     982:	81 81       	ldd	r24, Z+1	; 0x01
     984:	92 81       	ldd	r25, Z+2	; 0x02
     986:	19 d3       	rcall	.+1586   	; 0xfba <spiwrite>
	spideselect(sensor->select_pin);
     988:	d4 01       	movw	r26, r8
     98a:	8c 91       	ld	r24, X
     98c:	30 d3       	rcall	.+1632   	; 0xfee <spideselect>
     98e:	49 81       	ldd	r20, Y+1	; 0x01

	delay_us(delay_time);
     990:	5a 81       	ldd	r21, Y+2	; 0x02
     992:	41 15       	cp	r20, r1
     994:	51 05       	cpc	r21, r1
     996:	b1 f1       	breq	.+108    	; 0xa04 <readMS56XX+0xe8>
     998:	a1 2c       	mov	r10, r1
     99a:	0f 2e       	mov	r0, r31
     99c:	f8 e4       	ldi	r31, 0x48	; 72
     99e:	bf 2e       	mov	r11, r31
     9a0:	f0 2d       	mov	r31, r0
     9a2:	0f 2e       	mov	r0, r31
     9a4:	f8 ee       	ldi	r31, 0xE8	; 232
     9a6:	cf 2e       	mov	r12, r31
     9a8:	f0 2d       	mov	r31, r0
     9aa:	dd 24       	eor	r13, r13
     9ac:	d3 94       	inc	r13
     9ae:	e1 2c       	mov	r14, r1
     9b0:	f1 2c       	mov	r15, r1
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	24 2f       	mov	r18, r20
     9b8:	35 2f       	mov	r19, r21
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	e6 d7       	rcall	.+4044   	; 0x1994 <__muldi3>
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f6 e0       	ldi	r31, 0x06	; 6
     9cc:	af 2e       	mov	r10, r31
     9ce:	f0 2d       	mov	r31, r0
     9d0:	b1 2c       	mov	r11, r1
     9d2:	c1 2c       	mov	r12, r1
     9d4:	d1 2c       	mov	r13, r1
     9d6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivdi3>
     9da:	21 5c       	subi	r18, 0xC1	; 193
     9dc:	3d 4b       	sbci	r19, 0xBD	; 189
     9de:	40 4f       	sbci	r20, 0xF0	; 240
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	6f 4f       	sbci	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	8f 4f       	sbci	r24, 0xFF	; 255
     9e8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ea:	13 d7       	rcall	.+3622   	; 0x1812 <__floatundisf>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	34 e2       	ldi	r19, 0x24	; 36
     9f0:	44 e7       	ldi	r20, 0x74	; 116
     9f2:	59 e4       	ldi	r21, 0x49	; 73
     9f4:	6c d6       	rcall	.+3288   	; 0x16ce <__divsf3>
     9f6:	d8 d6       	rcall	.+3504   	; 0x17a8 <__fixunssfdi>
     9f8:	62 2f       	mov	r22, r18
     9fa:	73 2f       	mov	r23, r19
     9fc:	84 2f       	mov	r24, r20
     9fe:	95 2f       	mov	r25, r21
     a00:	8a de       	rcall	.-748    	; 0x716 <__portable_avr_delay_cycles>
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <readMS56XX+0xf2>
     a04:	66 e0       	ldi	r22, 0x06	; 6
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	84 de       	rcall	.-760    	; 0x716 <__portable_avr_delay_cycles>
     a0e:	f4 01       	movw	r30, r8
     a10:	80 81       	ld	r24, Z

	//Read off raw pressure (D1)
	spiselect(sensor->select_pin);
     a12:	d9 d2       	rcall	.+1458   	; 0xfc6 <spiselect>
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	d4 01       	movw	r26, r8
	spiwrite(sensor->spi, 0x0);
     a18:	11 96       	adiw	r26, 0x01	; 1
     a1a:	8d 91       	ld	r24, X+
     a1c:	9c 91       	ld	r25, X
     a1e:	12 97       	sbiw	r26, 0x02	; 2
     a20:	cc d2       	rcall	.+1432   	; 0xfba <spiwrite>
     a22:	f4 01       	movw	r30, r8
     a24:	81 81       	ldd	r24, Z+1	; 0x01
	rawPressure = read24(sensor->spi);
     a26:	92 81       	ldd	r25, Z+2	; 0x02
     a28:	95 de       	rcall	.-726    	; 0x754 <read24>
     a2a:	6c a7       	std	Y+44, r22	; 0x2c
     a2c:	7d a7       	std	Y+45, r23	; 0x2d
     a2e:	8e a7       	std	Y+46, r24	; 0x2e
     a30:	9f a7       	std	Y+47, r25	; 0x2f
     a32:	d4 01       	movw	r26, r8
     a34:	8c 91       	ld	r24, X
	spideselect(sensor->select_pin);
     a36:	db d2       	rcall	.+1462   	; 0xfee <spideselect>
     a38:	f4 01       	movw	r30, r8
     a3a:	80 81       	ld	r24, Z
	
	//Ask for raw temperature, 4096 OSR
	spiselect(sensor->select_pin);
     a3c:	c4 d2       	rcall	.+1416   	; 0xfc6 <spiselect>
     a3e:	6c 81       	ldd	r22, Y+4	; 0x04
     a40:	d4 01       	movw	r26, r8
     a42:	11 96       	adiw	r26, 0x01	; 1
	spiwrite(sensor->spi, D2_cmd); //OSR = 4096
     a44:	8d 91       	ld	r24, X+
     a46:	9c 91       	ld	r25, X
     a48:	12 97       	sbiw	r26, 0x02	; 2
     a4a:	b7 d2       	rcall	.+1390   	; 0xfba <spiwrite>
     a4c:	f4 01       	movw	r30, r8
     a4e:	80 81       	ld	r24, Z
     a50:	ce d2       	rcall	.+1436   	; 0xfee <spideselect>
     a52:	49 81       	ldd	r20, Y+1	; 0x01
	spideselect(sensor->select_pin);
     a54:	5a 81       	ldd	r21, Y+2	; 0x02
     a56:	41 15       	cp	r20, r1
     a58:	51 05       	cpc	r21, r1
     a5a:	a9 f1       	breq	.+106    	; 0xac6 <readMS56XX+0x1aa>
	
	delay_us(delay_time);
     a5c:	a1 2c       	mov	r10, r1
     a5e:	0f 2e       	mov	r0, r31
     a60:	f8 e4       	ldi	r31, 0x48	; 72
     a62:	bf 2e       	mov	r11, r31
     a64:	f0 2d       	mov	r31, r0
     a66:	0f 2e       	mov	r0, r31
     a68:	f8 ee       	ldi	r31, 0xE8	; 232
     a6a:	cf 2e       	mov	r12, r31
     a6c:	f0 2d       	mov	r31, r0
     a6e:	dd 24       	eor	r13, r13
     a70:	d3 94       	inc	r13
     a72:	e1 2c       	mov	r14, r1
     a74:	f1 2c       	mov	r15, r1
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	24 2f       	mov	r18, r20
     a7c:	35 2f       	mov	r19, r21
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	84 d7       	rcall	.+3848   	; 0x1994 <__muldi3>
     a8c:	0f 2e       	mov	r0, r31
     a8e:	f6 e0       	ldi	r31, 0x06	; 6
     a90:	af 2e       	mov	r10, r31
     a92:	f0 2d       	mov	r31, r0
     a94:	b1 2c       	mov	r11, r1
     a96:	c1 2c       	mov	r12, r1
     a98:	d1 2c       	mov	r13, r1
     a9a:	cf d7       	rcall	.+3998   	; 0x1a3a <__udivdi3>
     a9c:	21 5c       	subi	r18, 0xC1	; 193
     a9e:	3d 4b       	sbci	r19, 0xBD	; 189
     aa0:	40 4f       	sbci	r20, 0xF0	; 240
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	6f 4f       	sbci	r22, 0xFF	; 255
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	b2 d6       	rcall	.+3428   	; 0x1812 <__floatundisf>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	34 e2       	ldi	r19, 0x24	; 36
     ab2:	44 e7       	ldi	r20, 0x74	; 116
     ab4:	59 e4       	ldi	r21, 0x49	; 73
     ab6:	0b d6       	rcall	.+3094   	; 0x16ce <__divsf3>
     ab8:	77 d6       	rcall	.+3310   	; 0x17a8 <__fixunssfdi>
     aba:	62 2f       	mov	r22, r18
     abc:	73 2f       	mov	r23, r19
     abe:	84 2f       	mov	r24, r20
     ac0:	95 2f       	mov	r25, r21
     ac2:	29 de       	rcall	.-942    	; 0x716 <__portable_avr_delay_cycles>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <readMS56XX+0x1b4>
     ac6:	66 e0       	ldi	r22, 0x06	; 6
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	23 de       	rcall	.-954    	; 0x716 <__portable_avr_delay_cycles>
     ad0:	d4 01       	movw	r26, r8
     ad2:	8c 91       	ld	r24, X

	//Read off raw temperature (D2)
	spiselect(sensor->select_pin);
     ad4:	78 d2       	rcall	.+1264   	; 0xfc6 <spiselect>
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	f4 01       	movw	r30, r8
     ada:	81 81       	ldd	r24, Z+1	; 0x01
	spiwrite(sensor->spi, 0x0);
     adc:	92 81       	ldd	r25, Z+2	; 0x02
     ade:	6d d2       	rcall	.+1242   	; 0xfba <spiwrite>
     ae0:	d4 01       	movw	r26, r8
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	8d 91       	ld	r24, X+
	rawTemp = read24(sensor->spi);
     ae6:	9c 91       	ld	r25, X
     ae8:	12 97       	sbiw	r26, 0x02	; 2
     aea:	34 de       	rcall	.-920    	; 0x754 <read24>
     aec:	6b 01       	movw	r12, r22
     aee:	7c 01       	movw	r14, r24
     af0:	f4 01       	movw	r30, r8
     af2:	80 81       	ld	r24, Z
     af4:	7c d2       	rcall	.+1272   	; 0xfee <spideselect>
     af6:	d4 01       	movw	r26, r8
	spideselect(sensor->select_pin);
     af8:	56 96       	adiw	r26, 0x16	; 22
     afa:	4d 91       	ld	r20, X+
     afc:	5c 91       	ld	r21, X
     afe:	57 97       	sbiw	r26, 0x17	; 23
	
	int32_t dT = rawTemp - (int32_t)(((int64_t)sensor->Tref) << 8);
	int32_t TEMP = (int32_t)(((int32_t)2000) + ((int32_t)(((int64_t)dT) * ((int64_t)sensor->TEMPSENS) >> 23)));
     b00:	24 2f       	mov	r18, r20
     b02:	35 2f       	mov	r19, r21
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	08 e0       	ldi	r16, 0x08	; 8
     b12:	ef d7       	rcall	.+4062   	; 0x1af2 <__ashldi3>
     b14:	2d 83       	std	Y+5, r18	; 0x05
     b16:	3e 83       	std	Y+6, r19	; 0x06
     b18:	4f 83       	std	Y+7, r20	; 0x07
     b1a:	58 87       	std	Y+8, r21	; 0x08
     b1c:	69 87       	std	Y+9, r22	; 0x09
     b1e:	7a 87       	std	Y+10, r23	; 0x0a
     b20:	8b 87       	std	Y+11, r24	; 0x0b
     b22:	9c 87       	std	Y+12, r25	; 0x0c
     b24:	97 01       	movw	r18, r14
     b26:	86 01       	movw	r16, r12
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	9e 81       	ldd	r25, Y+6	; 0x06
     b2c:	af 81       	ldd	r26, Y+7	; 0x07
     b2e:	b8 85       	ldd	r27, Y+8	; 0x08
     b30:	08 1b       	sub	r16, r24
     b32:	19 0b       	sbc	r17, r25
     b34:	2a 0b       	sbc	r18, r26
     b36:	3b 0b       	sbc	r19, r27
     b38:	0d 83       	std	Y+5, r16	; 0x05
     b3a:	1e 83       	std	Y+6, r17	; 0x06
     b3c:	2f 83       	std	Y+7, r18	; 0x07
     b3e:	38 87       	std	Y+8, r19	; 0x08
     b40:	33 0f       	add	r19, r19
     b42:	00 0b       	sbc	r16, r16
     b44:	10 2f       	mov	r17, r16
     b46:	98 01       	movw	r18, r16
     b48:	09 8b       	std	Y+17, r16	; 0x11
     b4a:	1a 8b       	std	Y+18, r17	; 0x12
     b4c:	2b 8b       	std	Y+19, r18	; 0x13
     b4e:	3c 8b       	std	Y+20, r19	; 0x14
     b50:	d4 01       	movw	r26, r8
     b52:	58 96       	adiw	r26, 0x18	; 24
     b54:	4d 91       	ld	r20, X+
     b56:	5c 91       	ld	r21, X
     b58:	59 97       	sbiw	r26, 0x19	; 25
     b5a:	ad 80       	ldd	r10, Y+5	; 0x05
     b5c:	be 80       	ldd	r11, Y+6	; 0x06
     b5e:	cf 80       	ldd	r12, Y+7	; 0x07
     b60:	d8 84       	ldd	r13, Y+8	; 0x08
     b62:	e9 88       	ldd	r14, Y+17	; 0x11
     b64:	fe 2c       	mov	r15, r14
     b66:	0e 2d       	mov	r16, r14
     b68:	1e 2d       	mov	r17, r14
     b6a:	24 2f       	mov	r18, r20
     b6c:	35 2f       	mov	r19, r21
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0c d7       	rcall	.+3608   	; 0x1994 <__muldi3>
     b7c:	07 e1       	ldi	r16, 0x17	; 23
     b7e:	d2 d7       	rcall	.+4004   	; 0x1b24 <__ashrdi3>
     b80:	82 2f       	mov	r24, r18
     b82:	93 2f       	mov	r25, r19
     b84:	a4 2f       	mov	r26, r20
     b86:	b5 2f       	mov	r27, r21
     b88:	8d 87       	std	Y+13, r24	; 0x0d
     b8a:	9e 87       	std	Y+14, r25	; 0x0e
     b8c:	af 87       	std	Y+15, r26	; 0x0f
     b8e:	b8 8b       	std	Y+16, r27	; 0x10
     b90:	8c 01       	movw	r16, r24
     b92:	9d 01       	movw	r18, r26
     b94:	00 53       	subi	r16, 0x30	; 48
     b96:	18 4f       	sbci	r17, 0xF8	; 248
     b98:	2f 4f       	sbci	r18, 0xFF	; 255
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	0d 8b       	std	Y+21, r16	; 0x15
     b9e:	1e 8b       	std	Y+22, r17	; 0x16
     ba0:	2f 8b       	std	Y+23, r18	; 0x17
     ba2:	38 8f       	std	Y+24, r19	; 0x18
     ba4:	00 3d       	cpi	r16, 0xD0	; 208
     ba6:	17 40       	sbci	r17, 0x07	; 7
     ba8:	21 05       	cpc	r18, r1
     baa:	31 05       	cpc	r19, r1
	
	int32_t T2 = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	if (TEMP < 2000)
     bac:	0c f0       	brlt	.+2      	; 0xbb0 <readMS56XX+0x294>
     bae:	7c c0       	rjmp	.+248    	; 0xca8 <readMS56XX+0x38c>
     bb0:	fe 2c       	mov	r15, r14
     bb2:	0e 2d       	mov	r16, r14
     bb4:	1e 2d       	mov	r17, r14
     bb6:	2a 2d       	mov	r18, r10
	{
		T2 = ((int64_t)dT) * ((int64_t)dT) / ((int64_t)2147483648);
     bb8:	3b 2d       	mov	r19, r11
     bba:	4c 2d       	mov	r20, r12
     bbc:	5d 2d       	mov	r21, r13
     bbe:	60 2f       	mov	r22, r16
     bc0:	70 2f       	mov	r23, r16
     bc2:	80 2f       	mov	r24, r16
     bc4:	9e 2d       	mov	r25, r14
     bc6:	e6 d6       	rcall	.+3532   	; 0x1994 <__muldi3>
     bc8:	c2 2e       	mov	r12, r18
     bca:	d3 2e       	mov	r13, r19
     bcc:	e4 2e       	mov	r14, r20
     bce:	f5 2e       	mov	r15, r21
     bd0:	06 2f       	mov	r16, r22
     bd2:	17 2f       	mov	r17, r23
     bd4:	a8 2e       	mov	r10, r24
     bd6:	b9 2e       	mov	r11, r25
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	d4 d7       	rcall	.+4008   	; 0x1b84 <__cmpdi2_s8>
     bdc:	84 f4       	brge	.+32     	; 0xbfe <readMS56XX+0x2e2>
     bde:	21 50       	subi	r18, 0x01	; 1
     be0:	31 09       	sbc	r19, r1
     be2:	41 09       	sbc	r20, r1
     be4:	50 48       	sbci	r21, 0x80	; 128
     be6:	6f 4f       	sbci	r22, 0xFF	; 255
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	c2 2e       	mov	r12, r18
     bf0:	d3 2e       	mov	r13, r19
     bf2:	e4 2e       	mov	r14, r20
     bf4:	f5 2e       	mov	r15, r21
     bf6:	06 2f       	mov	r16, r22
     bf8:	17 2f       	mov	r17, r23
     bfa:	a8 2e       	mov	r10, r24
     bfc:	b9 2e       	mov	r11, r25
     bfe:	2c 2d       	mov	r18, r12
     c00:	3d 2d       	mov	r19, r13
     c02:	4e 2d       	mov	r20, r14
     c04:	5f 2d       	mov	r21, r15
     c06:	60 2f       	mov	r22, r16
     c08:	71 2f       	mov	r23, r17
     c0a:	8a 2d       	mov	r24, r10
     c0c:	9b 2d       	mov	r25, r11
     c0e:	0f e1       	ldi	r16, 0x1F	; 31
     c10:	89 d7       	rcall	.+3858   	; 0x1b24 <__ashrdi3>
     c12:	29 8f       	std	Y+25, r18	; 0x19
     c14:	3a 8f       	std	Y+26, r19	; 0x1a
     c16:	4b 8f       	std	Y+27, r20	; 0x1b
     c18:	5c 8f       	std	Y+28, r21	; 0x1c
     c1a:	4d 84       	ldd	r4, Y+13	; 0x0d
     c1c:	5e 84       	ldd	r5, Y+14	; 0x0e
     c1e:	6f 84       	ldd	r6, Y+15	; 0x0f
     c20:	78 88       	ldd	r7, Y+16	; 0x10
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) >> 4;
     c22:	77 0c       	add	r7, r7
     c24:	44 08       	sbc	r4, r4
     c26:	54 2c       	mov	r5, r4
     c28:	32 01       	movw	r6, r4
     c2a:	2d 85       	ldd	r18, Y+13	; 0x0d
     c2c:	3e 85       	ldd	r19, Y+14	; 0x0e
     c2e:	4f 85       	ldd	r20, Y+15	; 0x0f
     c30:	58 89       	ldd	r21, Y+16	; 0x10
     c32:	64 2d       	mov	r22, r4
     c34:	74 2d       	mov	r23, r4
     c36:	84 2d       	mov	r24, r4
     c38:	94 2d       	mov	r25, r4
     c3a:	02 e0       	ldi	r16, 0x02	; 2
     c3c:	5a d7       	rcall	.+3764   	; 0x1af2 <__ashldi3>
     c3e:	a2 2e       	mov	r10, r18
     c40:	b3 2e       	mov	r11, r19
     c42:	c4 2e       	mov	r12, r20
     c44:	d5 2e       	mov	r13, r21
     c46:	e6 2e       	mov	r14, r22
     c48:	f7 2e       	mov	r15, r23
     c4a:	e8 2f       	mov	r30, r24
     c4c:	19 2f       	mov	r17, r25
     c4e:	04 e0       	ldi	r16, 0x04	; 4
     c50:	50 d7       	rcall	.+3744   	; 0x1af2 <__ashldi3>
     c52:	0e 2f       	mov	r16, r30
     c54:	8e d7       	rcall	.+3868   	; 0x1b72 <__subdi3>
     c56:	ad 84       	ldd	r10, Y+13	; 0x0d
     c58:	be 84       	ldd	r11, Y+14	; 0x0e
     c5a:	cf 84       	ldd	r12, Y+15	; 0x0f
     c5c:	d8 88       	ldd	r13, Y+16	; 0x10
     c5e:	e4 2c       	mov	r14, r4
     c60:	f4 2c       	mov	r15, r4
     c62:	04 2d       	mov	r16, r4
     c64:	14 2d       	mov	r17, r4
     c66:	7c d7       	rcall	.+3832   	; 0x1b60 <__adddi3>
     c68:	95 d6       	rcall	.+3370   	; 0x1994 <__muldi3>
     c6a:	04 e0       	ldi	r16, 0x04	; 4
     c6c:	5b d7       	rcall	.+3766   	; 0x1b24 <__ashrdi3>
     c6e:	2d 8f       	std	Y+29, r18	; 0x1d
     c70:	3e 8f       	std	Y+30, r19	; 0x1e
     c72:	4f 8f       	std	Y+31, r20	; 0x1f
     c74:	58 a3       	std	Y+32, r21	; 0x20
     c76:	69 a3       	std	Y+33, r22	; 0x21
     c78:	7a a3       	std	Y+34, r23	; 0x22
     c7a:	8b a3       	std	Y+35, r24	; 0x23
     c7c:	29 2e       	mov	r2, r25
     c7e:	2a 2d       	mov	r18, r10
     c80:	3b 2d       	mov	r19, r11
     c82:	4c 2d       	mov	r20, r12
     c84:	5d 2d       	mov	r21, r13
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
     c86:	64 2d       	mov	r22, r4
     c88:	74 2d       	mov	r23, r4
     c8a:	84 2d       	mov	r24, r4
     c8c:	94 2d       	mov	r25, r4
     c8e:	01 e0       	ldi	r16, 0x01	; 1
     c90:	30 d7       	rcall	.+3680   	; 0x1af2 <__ashldi3>
     c92:	04 2d       	mov	r16, r4
     c94:	7f d6       	rcall	.+3326   	; 0x1994 <__muldi3>
     c96:	2d 87       	std	Y+13, r18	; 0x0d
     c98:	3c a3       	std	Y+36, r19	; 0x24
     c9a:	4d a3       	std	Y+37, r20	; 0x25
     c9c:	5e a3       	std	Y+38, r21	; 0x26
     c9e:	6f a3       	std	Y+39, r22	; 0x27
     ca0:	78 a7       	std	Y+40, r23	; 0x28
     ca2:	89 a7       	std	Y+41, r24	; 0x29
     ca4:	9a a7       	std	Y+42, r25	; 0x2a
     ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <readMS56XX+0x3b4>
     ca8:	1d 86       	std	Y+13, r1	; 0x0d
     caa:	1c a2       	std	Y+36, r1	; 0x24
     cac:	1d a2       	std	Y+37, r1	; 0x25
     cae:	1e a2       	std	Y+38, r1	; 0x26
     cb0:	1f a2       	std	Y+39, r1	; 0x27
     cb2:	18 a6       	std	Y+40, r1	; 0x28
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
		SENS2 = 0;	
     cb4:	19 a6       	std	Y+41, r1	; 0x29
     cb6:	1a a6       	std	Y+42, r1	; 0x2a
     cb8:	1d 8e       	std	Y+29, r1	; 0x1d
     cba:	1e 8e       	std	Y+30, r1	; 0x1e
     cbc:	1f 8e       	std	Y+31, r1	; 0x1f
     cbe:	18 a2       	std	Y+32, r1	; 0x20
     cc0:	19 a2       	std	Y+33, r1	; 0x21
     cc2:	1a a2       	std	Y+34, r1	; 0x22
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
     cc4:	1b a2       	std	Y+35, r1	; 0x23
     cc6:	21 2c       	mov	r2, r1
     cc8:	19 8e       	std	Y+25, r1	; 0x19
     cca:	1a 8e       	std	Y+26, r1	; 0x1a
     ccc:	1b 8e       	std	Y+27, r1	; 0x1b
     cce:	1c 8e       	std	Y+28, r1	; 0x1c
     cd0:	8d 89       	ldd	r24, Y+21	; 0x15
     cd2:	9e 89       	ldd	r25, Y+22	; 0x16
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) >> 4;
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
     cd4:	af 89       	ldd	r26, Y+23	; 0x17
     cd6:	b8 8d       	ldd	r27, Y+24	; 0x18
     cd8:	84 32       	cpi	r24, 0x24	; 36
     cda:	ea ef       	ldi	r30, 0xFA	; 250
		OFF2 = 0;
		SENS2 = 0;	
	} 
	
	if (TEMP<-1500)
     cdc:	9e 07       	cpc	r25, r30
     cde:	ef ef       	ldi	r30, 0xFF	; 255
     ce0:	ae 07       	cpc	r26, r30
     ce2:	be 07       	cpc	r27, r30
     ce4:	0c f0       	brlt	.+2      	; 0xce8 <readMS56XX+0x3cc>
     ce6:	58 c0       	rjmp	.+176    	; 0xd98 <readMS56XX+0x47c>
     ce8:	2d 89       	ldd	r18, Y+21	; 0x15
     cea:	3e 89       	ldd	r19, Y+22	; 0x16
     cec:	4f 89       	ldd	r20, Y+23	; 0x17
     cee:	58 8d       	ldd	r21, Y+24	; 0x18
     cf0:	6c 01       	movw	r12, r24
	{
		OFF2 += ((int64_t)15) * (((int64_t) TEMP) + ((int64_t) 1500))^2; 
     cf2:	7d 01       	movw	r14, r26
     cf4:	ff 0c       	add	r15, r15
     cf6:	cc 08       	sbc	r12, r12
     cf8:	dc 2c       	mov	r13, r12
     cfa:	76 01       	movw	r14, r12
     cfc:	6c 2d       	mov	r22, r12
     cfe:	7c 2d       	mov	r23, r12
     d00:	8c 2d       	mov	r24, r12
     d02:	9c 2d       	mov	r25, r12
     d04:	24 52       	subi	r18, 0x24	; 36
     d06:	3a 4f       	sbci	r19, 0xFA	; 250
     d08:	4f 4f       	sbci	r20, 0xFF	; 255
     d0a:	5f 4f       	sbci	r21, 0xFF	; 255
     d0c:	6f 4f       	sbci	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	8f 4f       	sbci	r24, 0xFF	; 255
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	32 2e       	mov	r3, r18
     d16:	43 2e       	mov	r4, r19
     d18:	54 2e       	mov	r5, r20
     d1a:	65 2e       	mov	r6, r21
     d1c:	76 2e       	mov	r7, r22
     d1e:	b7 2f       	mov	r27, r23
     d20:	a8 2f       	mov	r26, r24
     d22:	f9 2f       	mov	r31, r25
     d24:	04 e0       	ldi	r16, 0x04	; 4
     d26:	e5 d6       	rcall	.+3530   	; 0x1af2 <__ashldi3>
     d28:	a3 2c       	mov	r10, r3
     d2a:	b4 2c       	mov	r11, r4
     d2c:	c5 2c       	mov	r12, r5
     d2e:	d6 2c       	mov	r13, r6
     d30:	e7 2c       	mov	r14, r7
     d32:	fb 2e       	mov	r15, r27
     d34:	0a 2f       	mov	r16, r26
     d36:	1f 2f       	mov	r17, r31
     d38:	1c d7       	rcall	.+3640   	; 0x1b72 <__subdi3>
     d3a:	e2 e0       	ldi	r30, 0x02	; 2
     d3c:	2e 27       	eor	r18, r30
     d3e:	ad 8c       	ldd	r10, Y+29	; 0x1d
     d40:	be 8c       	ldd	r11, Y+30	; 0x1e
     d42:	cf 8c       	ldd	r12, Y+31	; 0x1f
     d44:	d8 a0       	ldd	r13, Y+32	; 0x20
     d46:	e9 a0       	ldd	r14, Y+33	; 0x21
     d48:	fa a0       	ldd	r15, Y+34	; 0x22
     d4a:	0b a1       	ldd	r16, Y+35	; 0x23
     d4c:	12 2d       	mov	r17, r2
     d4e:	08 d7       	rcall	.+3600   	; 0x1b60 <__adddi3>
     d50:	2d 8f       	std	Y+29, r18	; 0x1d
     d52:	3e 8f       	std	Y+30, r19	; 0x1e
     d54:	4f 8f       	std	Y+31, r20	; 0x1f
     d56:	58 a3       	std	Y+32, r21	; 0x20
     d58:	69 a3       	std	Y+33, r22	; 0x21
     d5a:	7a a3       	std	Y+34, r23	; 0x22
     d5c:	8b a3       	std	Y+35, r24	; 0x23
     d5e:	29 2e       	mov	r2, r25
     d60:	23 2d       	mov	r18, r3
     d62:	34 2d       	mov	r19, r4
     d64:	45 2d       	mov	r20, r5
     d66:	56 2d       	mov	r21, r6
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
     d68:	67 2d       	mov	r22, r7
     d6a:	7b 2f       	mov	r23, r27
     d6c:	8a 2f       	mov	r24, r26
     d6e:	9f 2f       	mov	r25, r31
     d70:	03 e0       	ldi	r16, 0x03	; 3
     d72:	bf d6       	rcall	.+3454   	; 0x1af2 <__ashldi3>
     d74:	2e 27       	eor	r18, r30
     d76:	ad 84       	ldd	r10, Y+13	; 0x0d
     d78:	bc a0       	ldd	r11, Y+36	; 0x24
     d7a:	cd a0       	ldd	r12, Y+37	; 0x25
     d7c:	de a0       	ldd	r13, Y+38	; 0x26
     d7e:	ef a0       	ldd	r14, Y+39	; 0x27
     d80:	f8 a4       	ldd	r15, Y+40	; 0x28
     d82:	09 a5       	ldd	r16, Y+41	; 0x29
     d84:	1a a5       	ldd	r17, Y+42	; 0x2a
     d86:	ec d6       	rcall	.+3544   	; 0x1b60 <__adddi3>
     d88:	2d 87       	std	Y+13, r18	; 0x0d
     d8a:	3c a3       	std	Y+36, r19	; 0x24
     d8c:	4d a3       	std	Y+37, r20	; 0x25
     d8e:	5e a3       	std	Y+38, r21	; 0x26
     d90:	6f a3       	std	Y+39, r22	; 0x27
     d92:	78 a7       	std	Y+40, r23	; 0x28
     d94:	89 a7       	std	Y+41, r24	; 0x29
     d96:	9a a7       	std	Y+42, r25	; 0x2a
     d98:	d4 01       	movw	r26, r8
     d9a:	13 96       	adiw	r26, 0x03	; 3
     d9c:	8c 91       	ld	r24, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
	}
	uint8_t offshift1, offshift2, sens_shift1, sens_shift2;
	switch (sensor->model)
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	18 f0       	brcs	.+6      	; 0xdac <readMS56XX+0x490>
     da6:	1c 96       	adiw	r26, 0x0c	; 12
     da8:	1c 92       	st	X, r1
     daa:	e9 c0       	rjmp	.+466    	; 0xf7e <readMS56XX+0x662>
     dac:	f4 01       	movw	r30, r8
			offshift2 = 6;
			sens_shift1 = 16;
			sens_shift2 = 7;
			break;
		default:
			sensor->data.valid = 0;
     dae:	44 89       	ldd	r20, Z+20	; 0x14
     db0:	55 89       	ldd	r21, Z+21	; 0x15
			return;
     db2:	ad 80       	ldd	r10, Y+5	; 0x05
	}
	int64_t OFF = (((int64_t)sensor->OFFt1) << offshift1) +
     db4:	be 80       	ldd	r11, Y+6	; 0x06
     db6:	cf 80       	ldd	r12, Y+7	; 0x07
     db8:	d8 84       	ldd	r13, Y+8	; 0x08
     dba:	e9 88       	ldd	r14, Y+17	; 0x11
     dbc:	fe 2c       	mov	r15, r14
     dbe:	0e 2d       	mov	r16, r14
     dc0:	1e 2d       	mov	r17, r14
     dc2:	24 2f       	mov	r18, r20
     dc4:	35 2f       	mov	r19, r21
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	e0 d5       	rcall	.+3008   	; 0x1994 <__muldi3>
     dd4:	06 e0       	ldi	r16, 0x06	; 6
     dd6:	a6 d6       	rcall	.+3404   	; 0x1b24 <__ashrdi3>
     dd8:	42 2e       	mov	r4, r18
     dda:	53 2e       	mov	r5, r19
     ddc:	64 2e       	mov	r6, r20
     dde:	75 2e       	mov	r7, r21
     de0:	b6 2f       	mov	r27, r22
     de2:	a7 2f       	mov	r26, r23
     de4:	38 2e       	mov	r3, r24
     de6:	9b a7       	std	Y+43, r25	; 0x2b
     de8:	f4 01       	movw	r30, r8
     dea:	a0 88       	ldd	r10, Z+16	; 0x10
     dec:	b1 88       	ldd	r11, Z+17	; 0x11
     dee:	2a 2d       	mov	r18, r10
     df0:	3b 2d       	mov	r19, r11
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	01 e1       	ldi	r16, 0x11	; 17
     e00:	78 d6       	rcall	.+3312   	; 0x1af2 <__ashldi3>
     e02:	a2 2e       	mov	r10, r18
     e04:	b3 2e       	mov	r11, r19
     e06:	c4 2e       	mov	r12, r20
     e08:	d5 2e       	mov	r13, r21
     e0a:	e6 2e       	mov	r14, r22
     e0c:	f7 2e       	mov	r15, r23
     e0e:	08 2f       	mov	r16, r24
     e10:	19 2f       	mov	r17, r25
     e12:	24 2d       	mov	r18, r4
     e14:	35 2d       	mov	r19, r5
     e16:	46 2d       	mov	r20, r6
     e18:	57 2d       	mov	r21, r7
     e1a:	6b 2f       	mov	r22, r27
     e1c:	7a 2f       	mov	r23, r26
     e1e:	83 2d       	mov	r24, r3
     e20:	9b a5       	ldd	r25, Y+43	; 0x2b
     e22:	9e d6       	rcall	.+3388   	; 0x1b60 <__adddi3>
     e24:	32 2e       	mov	r3, r18
     e26:	3b a7       	std	Y+43, r19	; 0x2b
     e28:	48 ab       	std	Y+48, r20	; 0x30
     e2a:	59 ab       	std	Y+49, r21	; 0x31
     e2c:	6a ab       	std	Y+50, r22	; 0x32
     e2e:	7b ab       	std	Y+51, r23	; 0x33
     e30:	8c ab       	std	Y+52, r24	; 0x34
     e32:	9d ab       	std	Y+53, r25	; 0x35
     e34:	42 89       	ldd	r20, Z+18	; 0x12
     e36:	53 89       	ldd	r21, Z+19	; 0x13
     e38:	ad 80       	ldd	r10, Y+5	; 0x05
     e3a:	be 80       	ldd	r11, Y+6	; 0x06
	((((int64_t)sensor->TCO) * ((int64_t)dT)) >> offshift2);
	
	int64_t SENS = (((int64_t)sensor->SENSt1) << sens_shift1) + ((((int64_t)sensor->TCS) * ((int64_t)dT)) >> sens_shift2);
     e3c:	cf 80       	ldd	r12, Y+7	; 0x07
     e3e:	d8 84       	ldd	r13, Y+8	; 0x08
     e40:	e9 88       	ldd	r14, Y+17	; 0x11
     e42:	fe 2c       	mov	r15, r14
     e44:	0e 2d       	mov	r16, r14
     e46:	1e 2d       	mov	r17, r14
     e48:	24 2f       	mov	r18, r20
     e4a:	35 2f       	mov	r19, r21
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	9d d5       	rcall	.+2874   	; 0x1994 <__muldi3>
     e5a:	07 e0       	ldi	r16, 0x07	; 7
     e5c:	63 d6       	rcall	.+3270   	; 0x1b24 <__ashrdi3>
     e5e:	42 2e       	mov	r4, r18
     e60:	53 2e       	mov	r5, r19
     e62:	64 2e       	mov	r6, r20
     e64:	75 2e       	mov	r7, r21
     e66:	b6 2f       	mov	r27, r22
     e68:	a7 2f       	mov	r26, r23
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	99 8b       	std	Y+17, r25	; 0x11
     e6e:	f4 01       	movw	r30, r8
     e70:	a6 84       	ldd	r10, Z+14	; 0x0e
     e72:	b7 84       	ldd	r11, Z+15	; 0x0f
     e74:	2a 2d       	mov	r18, r10
     e76:	3b 2d       	mov	r19, r11
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	00 e1       	ldi	r16, 0x10	; 16
     e86:	35 d6       	rcall	.+3178   	; 0x1af2 <__ashldi3>
     e88:	a2 2e       	mov	r10, r18
     e8a:	b3 2e       	mov	r11, r19
     e8c:	c4 2e       	mov	r12, r20
     e8e:	d5 2e       	mov	r13, r21
     e90:	e6 2e       	mov	r14, r22
     e92:	f7 2e       	mov	r15, r23
     e94:	08 2f       	mov	r16, r24
     e96:	19 2f       	mov	r17, r25
     e98:	24 2d       	mov	r18, r4
     e9a:	35 2d       	mov	r19, r5
     e9c:	46 2d       	mov	r20, r6
     e9e:	57 2d       	mov	r21, r7
     ea0:	6b 2f       	mov	r22, r27
     ea2:	7a 2f       	mov	r23, r26
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	99 89       	ldd	r25, Y+17	; 0x11
     ea8:	5b d6       	rcall	.+3254   	; 0x1b60 <__adddi3>
     eaa:	ad 84       	ldd	r10, Y+13	; 0x0d
     eac:	bc a0       	ldd	r11, Y+36	; 0x24
     eae:	cd a0       	ldd	r12, Y+37	; 0x25
     eb0:	de a0       	ldd	r13, Y+38	; 0x26
	pressureSensorCalibration.TEMPSENS);*/
				
	/*printf("TEMP: %" PRIi32 "\n", TEMP);
	printf("Pressure: %" PRIi32 "\n", (int32_t)PRESSURE);*/
	
	sensor->data.pressure = (int32_t) PRESSURE; //In pascals
     eb2:	ef a0       	ldd	r14, Y+39	; 0x27
     eb4:	f8 a4       	ldd	r15, Y+40	; 0x28
     eb6:	09 a5       	ldd	r16, Y+41	; 0x29
     eb8:	1a a5       	ldd	r17, Y+42	; 0x2a
     eba:	5b d6       	rcall	.+3254   	; 0x1b72 <__subdi3>
     ebc:	cc a4       	ldd	r12, Y+44	; 0x2c
     ebe:	dd a4       	ldd	r13, Y+45	; 0x2d
     ec0:	ee a4       	ldd	r14, Y+46	; 0x2e
     ec2:	ff a4       	ldd	r15, Y+47	; 0x2f
     ec4:	56 01       	movw	r10, r12
     ec6:	67 01       	movw	r12, r14
     ec8:	e1 2c       	mov	r14, r1
     eca:	f1 2c       	mov	r15, r1
     ecc:	87 01       	movw	r16, r14
     ece:	ad 82       	std	Y+5, r10	; 0x05
     ed0:	be 82       	std	Y+6, r11	; 0x06
     ed2:	cf 82       	std	Y+7, r12	; 0x07
     ed4:	d8 86       	std	Y+8, r13	; 0x08
     ed6:	e9 86       	std	Y+9, r14	; 0x09
     ed8:	fa 86       	std	Y+10, r15	; 0x0a
     eda:	0b 87       	std	Y+11, r16	; 0x0b
     edc:	1c 87       	std	Y+12, r17	; 0x0c
     ede:	e1 2c       	mov	r14, r1
     ee0:	f1 2c       	mov	r15, r1
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	56 d5       	rcall	.+2732   	; 0x1994 <__muldi3>
     ee8:	05 e1       	ldi	r16, 0x15	; 21
     eea:	1c d6       	rcall	.+3128   	; 0x1b24 <__ashrdi3>
     eec:	42 2e       	mov	r4, r18
     eee:	53 2e       	mov	r5, r19
     ef0:	64 2e       	mov	r6, r20
     ef2:	75 2e       	mov	r7, r21
     ef4:	b6 2f       	mov	r27, r22
     ef6:	a7 2f       	mov	r26, r23
     ef8:	f8 2f       	mov	r31, r24
     efa:	e9 2f       	mov	r30, r25
     efc:	23 2d       	mov	r18, r3
     efe:	3b a5       	ldd	r19, Y+43	; 0x2b
     f00:	48 a9       	ldd	r20, Y+48	; 0x30
     f02:	59 a9       	ldd	r21, Y+49	; 0x31
     f04:	6a a9       	ldd	r22, Y+50	; 0x32
     f06:	7b a9       	ldd	r23, Y+51	; 0x33
     f08:	8c a9       	ldd	r24, Y+52	; 0x34
     f0a:	9d a9       	ldd	r25, Y+53	; 0x35
     f0c:	ad 8c       	ldd	r10, Y+29	; 0x1d
     f0e:	be 8c       	ldd	r11, Y+30	; 0x1e
     f10:	cf 8c       	ldd	r12, Y+31	; 0x1f
     f12:	d8 a0       	ldd	r13, Y+32	; 0x20
     f14:	e9 a0       	ldd	r14, Y+33	; 0x21
     f16:	fa a0       	ldd	r15, Y+34	; 0x22
     f18:	0b a1       	ldd	r16, Y+35	; 0x23
     f1a:	12 2d       	mov	r17, r2
     f1c:	2a d6       	rcall	.+3156   	; 0x1b72 <__subdi3>
     f1e:	a2 2e       	mov	r10, r18
     f20:	b3 2e       	mov	r11, r19
     f22:	c4 2e       	mov	r12, r20
     f24:	d5 2e       	mov	r13, r21
     f26:	e6 2e       	mov	r14, r22
     f28:	f7 2e       	mov	r15, r23
     f2a:	08 2f       	mov	r16, r24
     f2c:	19 2f       	mov	r17, r25
     f2e:	24 2d       	mov	r18, r4
     f30:	35 2d       	mov	r19, r5
     f32:	46 2d       	mov	r20, r6
     f34:	57 2d       	mov	r21, r7
     f36:	6b 2f       	mov	r22, r27
     f38:	7a 2f       	mov	r23, r26
     f3a:	8f 2f       	mov	r24, r31
     f3c:	9e 2f       	mov	r25, r30
     f3e:	19 d6       	rcall	.+3122   	; 0x1b72 <__subdi3>
     f40:	0f e0       	ldi	r16, 0x0F	; 15
     f42:	f0 d5       	rcall	.+3040   	; 0x1b24 <__ashrdi3>
     f44:	d4 01       	movw	r26, r8
     f46:	14 96       	adiw	r26, 0x04	; 4
     f48:	2c 93       	st	X, r18
     f4a:	14 97       	sbiw	r26, 0x04	; 4
     f4c:	15 96       	adiw	r26, 0x05	; 5
     f4e:	3c 93       	st	X, r19
     f50:	15 97       	sbiw	r26, 0x05	; 5
     f52:	16 96       	adiw	r26, 0x06	; 6
     f54:	4c 93       	st	X, r20
     f56:	16 97       	sbiw	r26, 0x06	; 6
     f58:	17 96       	adiw	r26, 0x07	; 7
     f5a:	5c 93       	st	X, r21
     f5c:	8d 89       	ldd	r24, Y+21	; 0x15
     f5e:	9e 89       	ldd	r25, Y+22	; 0x16
     f60:	af 89       	ldd	r26, Y+23	; 0x17
     f62:	b8 8d       	ldd	r27, Y+24	; 0x18
     f64:	a9 8c       	ldd	r10, Y+25	; 0x19
     f66:	ba 8c       	ldd	r11, Y+26	; 0x1a
     f68:	cb 8c       	ldd	r12, Y+27	; 0x1b
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
     f6a:	dc 8c       	ldd	r13, Y+28	; 0x1c
     f6c:	8a 19       	sub	r24, r10
     f6e:	9b 09       	sbc	r25, r11
     f70:	ac 09       	sbc	r26, r12
     f72:	bd 09       	sbc	r27, r13
     f74:	f4 01       	movw	r30, r8
     f76:	80 87       	std	Z+8, r24	; 0x08
     f78:	91 87       	std	Z+9, r25	; 0x09
     f7a:	a2 87       	std	Z+10, r26	; 0x0a
     f7c:	b3 87       	std	Z+11, r27	; 0x0b
     f7e:	e5 96       	adiw	r28, 0x35	; 53
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
 }
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	df 90       	pop	r13
     f92:	cf 90       	pop	r12
     f94:	bf 90       	pop	r11
     f96:	af 90       	pop	r10
     f98:	9f 90       	pop	r9
     f9a:	8f 90       	pop	r8
     f9c:	7f 90       	pop	r7
     f9e:	6f 90       	pop	r6
     fa0:	5f 90       	pop	r5
     fa2:	4f 90       	pop	r4
     fa4:	3f 90       	pop	r3
     fa6:	2f 90       	pop	r2
     fa8:	08 95       	ret

00000faa <spiread>:
 */

#include "SPI.h"

uint8_t spiread(SPI_t* targetspi)
{
     faa:	fc 01       	movw	r30, r24
	targetspi->DATA = 0xFE;
     fac:	8e ef       	ldi	r24, 0xFE	; 254
     fae:	83 83       	std	Z+3, r24	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait until data actually comes in
     fb0:	92 81       	ldd	r25, Z+2	; 0x02
     fb2:	99 23       	and	r25, r25
     fb4:	ec f7       	brge	.-6      	; 0xfb0 <spiread+0x6>
	return targetspi->DATA;
     fb6:	83 81       	ldd	r24, Z+3	; 0x03

}
     fb8:	08 95       	ret

00000fba <spiwrite>:

void spiwrite(SPI_t* targetspi, uint8_t data)
{
     fba:	fc 01       	movw	r30, r24
	targetspi->DATA = data;
     fbc:	63 83       	std	Z+3, r22	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait for data to be sent
     fbe:	92 81       	ldd	r25, Z+2	; 0x02
     fc0:	99 23       	and	r25, r25
     fc2:	ec f7       	brge	.-6      	; 0xfbe <spiwrite+0x4>
}
     fc4:	08 95       	ret

00000fc6 <spiselect>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     fc6:	e8 2f       	mov	r30, r24
     fc8:	e6 95       	lsr	r30
     fca:	e6 95       	lsr	r30
     fcc:	e6 95       	lsr	r30
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	e4 9f       	mul	r30, r20
     fd2:	f0 01       	movw	r30, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     fd8:	87 70       	andi	r24, 0x07	; 7
     fda:	21 e0       	ldi	r18, 0x01	; 1
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	a9 01       	movw	r20, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <spiselect+0x20>
     fe2:	44 0f       	add	r20, r20
     fe4:	55 1f       	adc	r21, r21
     fe6:	8a 95       	dec	r24
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <spiselect+0x1c>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     fea:	46 83       	std	Z+6, r20	; 0x06
     fec:	08 95       	ret

00000fee <spideselect>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     fee:	e8 2f       	mov	r30, r24
     ff0:	e6 95       	lsr	r30
     ff2:	e6 95       	lsr	r30
     ff4:	e6 95       	lsr	r30
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	e4 9f       	mul	r30, r20
     ffa:	f0 01       	movw	r30, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1000:	87 70       	andi	r24, 0x07	; 7
    1002:	21 e0       	ldi	r18, 0x01	; 1
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <spideselect+0x20>
    100a:	44 0f       	add	r20, r20
    100c:	55 1f       	adc	r21, r21
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <spideselect+0x1c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1012:	45 83       	std	Z+5, r20	; 0x05
    1014:	08 95       	ret

00001016 <enable_select_pin>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1016:	e8 2f       	mov	r30, r24
    1018:	e6 95       	lsr	r30
    101a:	e6 95       	lsr	r30
    101c:	e6 95       	lsr	r30
    101e:	90 e2       	ldi	r25, 0x20	; 32
    1020:	e9 9f       	mul	r30, r25
    1022:	f0 01       	movw	r30, r0
    1024:	11 24       	eor	r1, r1
    1026:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1028:	98 2f       	mov	r25, r24
    102a:	97 70       	andi	r25, 0x07	; 7
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <enable_select_pin+0x20>
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	9a 95       	dec	r25
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <enable_select_pin+0x1c>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    103a:	21 83       	std	Z+1, r18	; 0x01
}

void enable_select_pin(ioport_pin_t pin)
{
	ioport_set_pin_dir(pin, IOPORT_DIR_OUTPUT);
	spideselect(pin); //Ensure we default to the deselected state
    103c:	d8 cf       	rjmp	.-80     	; 0xfee <spideselect>
    103e:	08 95       	ret

00001040 <initializespi>:
}

void initializespi(SPI_t* targetspi, PORT_t* port)
{
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
    104a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	09 f4       	brne	.+2      	; 0x1052 <initializespi+0x12>
    1050:	fe c0       	rjmp	.+508    	; 0x124e <initializespi+0x20e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1052:	80 3c       	cpi	r24, 0xC0	; 192
    1054:	91 05       	cpc	r25, r1
    1056:	21 f4       	brne	.+8      	; 0x1060 <initializespi+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1058:	60 e1       	ldi	r22, 0x10	; 16
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	7b d2       	rcall	.+1270   	; 0x1554 <sysclk_enable_module>
    105e:	f7 c0       	rjmp	.+494    	; 0x124e <initializespi+0x20e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1060:	c1 15       	cp	r28, r1
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	d8 07       	cpc	r29, r24
    1066:	21 f4       	brne	.+8      	; 0x1070 <initializespi+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1068:	64 e0       	ldi	r22, 0x04	; 4
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	73 d2       	rcall	.+1254   	; 0x1554 <sysclk_enable_module>
    106e:	ef c0       	rjmp	.+478    	; 0x124e <initializespi+0x20e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1070:	c0 38       	cpi	r28, 0x80	; 128
    1072:	e1 e0       	ldi	r30, 0x01	; 1
    1074:	de 07       	cpc	r29, r30
    1076:	21 f4       	brne	.+8      	; 0x1080 <initializespi+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1078:	62 e0       	ldi	r22, 0x02	; 2
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	6b d2       	rcall	.+1238   	; 0x1554 <sysclk_enable_module>
    107e:	e7 c0       	rjmp	.+462    	; 0x124e <initializespi+0x20e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1080:	c1 15       	cp	r28, r1
    1082:	f1 e0       	ldi	r31, 0x01	; 1
    1084:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1086:	21 f4       	brne	.+8      	; 0x1090 <initializespi+0x50>
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	63 d2       	rcall	.+1222   	; 0x1554 <sysclk_enable_module>
    108e:	df c0       	rjmp	.+446    	; 0x124e <initializespi+0x20e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1090:	c0 38       	cpi	r28, 0x80	; 128
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1096:	21 f4       	brne	.+8      	; 0x10a0 <initializespi+0x60>
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	5b d2       	rcall	.+1206   	; 0x1554 <sysclk_enable_module>
    109e:	d7 c0       	rjmp	.+430    	; 0x124e <initializespi+0x20e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    10a0:	c0 39       	cpi	r28, 0x90	; 144
    10a2:	e3 e0       	ldi	r30, 0x03	; 3
    10a4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <initializespi+0x70>
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	53 d2       	rcall	.+1190   	; 0x1554 <sysclk_enable_module>
    10ae:	cf c0       	rjmp	.+414    	; 0x124e <initializespi+0x20e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    10b0:	c1 15       	cp	r28, r1
    10b2:	f2 e0       	ldi	r31, 0x02	; 2
    10b4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    10b6:	21 f4       	brne	.+8      	; 0x10c0 <initializespi+0x80>
    10b8:	62 e0       	ldi	r22, 0x02	; 2
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	4b d2       	rcall	.+1174   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    10be:	c7 c0       	rjmp	.+398    	; 0x124e <initializespi+0x20e>
    10c0:	c0 34       	cpi	r28, 0x40	; 64
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    10c6:	21 f4       	brne	.+8      	; 0x10d0 <initializespi+0x90>
    10c8:	62 e0       	ldi	r22, 0x02	; 2
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	43 d2       	rcall	.+1158   	; 0x1554 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    10ce:	bf c0       	rjmp	.+382    	; 0x124e <initializespi+0x20e>
    10d0:	c0 32       	cpi	r28, 0x20	; 32
    10d2:	e3 e0       	ldi	r30, 0x03	; 3
    10d4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <initializespi+0xa0>
    10d8:	64 e0       	ldi	r22, 0x04	; 4
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	3b d2       	rcall	.+1142   	; 0x1554 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    10de:	b7 c0       	rjmp	.+366    	; 0x124e <initializespi+0x20e>
    10e0:	c1 15       	cp	r28, r1
    10e2:	f8 e0       	ldi	r31, 0x08	; 8
    10e4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <initializespi+0xb0>
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	33 d2       	rcall	.+1126   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10ee:	af c0       	rjmp	.+350    	; 0x124e <initializespi+0x20e>
    10f0:	c1 15       	cp	r28, r1
    10f2:	89 e0       	ldi	r24, 0x09	; 9
    10f4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10f6:	21 f4       	brne	.+8      	; 0x1100 <initializespi+0xc0>
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	2b d2       	rcall	.+1110   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10fe:	a7 c0       	rjmp	.+334    	; 0x124e <initializespi+0x20e>
    1100:	c1 15       	cp	r28, r1
    1102:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1104:	de 07       	cpc	r29, r30
    1106:	21 f4       	brne	.+8      	; 0x1110 <initializespi+0xd0>
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	85 e0       	ldi	r24, 0x05	; 5
    110c:	23 d2       	rcall	.+1094   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    110e:	9f c0       	rjmp	.+318    	; 0x124e <initializespi+0x20e>
    1110:	c1 15       	cp	r28, r1
    1112:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1114:	df 07       	cpc	r29, r31
    1116:	21 f4       	brne	.+8      	; 0x1120 <initializespi+0xe0>
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	86 e0       	ldi	r24, 0x06	; 6
    111c:	1b d2       	rcall	.+1078   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    111e:	97 c0       	rjmp	.+302    	; 0x124e <initializespi+0x20e>
    1120:	c0 34       	cpi	r28, 0x40	; 64
    1122:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1124:	d8 07       	cpc	r29, r24
    1126:	21 f4       	brne	.+8      	; 0x1130 <initializespi+0xf0>
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	13 d2       	rcall	.+1062   	; 0x1554 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    112e:	8f c0       	rjmp	.+286    	; 0x124e <initializespi+0x20e>
    1130:	c0 34       	cpi	r28, 0x40	; 64
    1132:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1134:	de 07       	cpc	r29, r30
    1136:	21 f4       	brne	.+8      	; 0x1140 <initializespi+0x100>
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    113c:	0b d2       	rcall	.+1046   	; 0x1554 <sysclk_enable_module>
    113e:	87 c0       	rjmp	.+270    	; 0x124e <initializespi+0x20e>
    1140:	c0 34       	cpi	r28, 0x40	; 64
    1142:	fa e0       	ldi	r31, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1144:	df 07       	cpc	r29, r31
    1146:	21 f4       	brne	.+8      	; 0x1150 <initializespi+0x110>
    1148:	62 e0       	ldi	r22, 0x02	; 2
    114a:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    114c:	03 d2       	rcall	.+1030   	; 0x1554 <sysclk_enable_module>
    114e:	7f c0       	rjmp	.+254    	; 0x124e <initializespi+0x20e>
    1150:	c0 39       	cpi	r28, 0x90	; 144
    1152:	88 e0       	ldi	r24, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1154:	d8 07       	cpc	r29, r24
    1156:	21 f4       	brne	.+8      	; 0x1160 <initializespi+0x120>
    1158:	64 e0       	ldi	r22, 0x04	; 4
    115a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    115c:	fb d1       	rcall	.+1014   	; 0x1554 <sysclk_enable_module>
    115e:	77 c0       	rjmp	.+238    	; 0x124e <initializespi+0x20e>
    1160:	c0 39       	cpi	r28, 0x90	; 144
    1162:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1164:	de 07       	cpc	r29, r30
    1166:	21 f4       	brne	.+8      	; 0x1170 <initializespi+0x130>
    1168:	64 e0       	ldi	r22, 0x04	; 4
    116a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    116c:	f3 d1       	rcall	.+998    	; 0x1554 <sysclk_enable_module>
    116e:	6f c0       	rjmp	.+222    	; 0x124e <initializespi+0x20e>
    1170:	c0 39       	cpi	r28, 0x90	; 144
    1172:	fa e0       	ldi	r31, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1174:	df 07       	cpc	r29, r31
    1176:	21 f4       	brne	.+8      	; 0x1180 <initializespi+0x140>
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    117c:	eb d1       	rcall	.+982    	; 0x1554 <sysclk_enable_module>
    117e:	67 c0       	rjmp	.+206    	; 0x124e <initializespi+0x20e>
    1180:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1182:	8b e0       	ldi	r24, 0x0B	; 11
    1184:	d8 07       	cpc	r29, r24
    1186:	21 f4       	brne	.+8      	; 0x1190 <initializespi+0x150>
    1188:	64 e0       	ldi	r22, 0x04	; 4
    118a:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    118c:	e3 d1       	rcall	.+966    	; 0x1554 <sysclk_enable_module>
    118e:	5f c0       	rjmp	.+190    	; 0x124e <initializespi+0x20e>
    1190:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1192:	e8 e0       	ldi	r30, 0x08	; 8
    1194:	de 07       	cpc	r29, r30
    1196:	21 f4       	brne	.+8      	; 0x11a0 <initializespi+0x160>
    1198:	68 e0       	ldi	r22, 0x08	; 8
    119a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    119c:	db d1       	rcall	.+950    	; 0x1554 <sysclk_enable_module>
    119e:	57 c0       	rjmp	.+174    	; 0x124e <initializespi+0x20e>
    11a0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    11a2:	f9 e0       	ldi	r31, 0x09	; 9
    11a4:	df 07       	cpc	r29, r31
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <initializespi+0x170>
    11a8:	68 e0       	ldi	r22, 0x08	; 8
    11aa:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    11ac:	d3 d1       	rcall	.+934    	; 0x1554 <sysclk_enable_module>
    11ae:	4f c0       	rjmp	.+158    	; 0x124e <initializespi+0x20e>
    11b0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    11b2:	8a e0       	ldi	r24, 0x0A	; 10
    11b4:	d8 07       	cpc	r29, r24
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <initializespi+0x180>
    11b8:	68 e0       	ldi	r22, 0x08	; 8
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    11ba:	85 e0       	ldi	r24, 0x05	; 5
    11bc:	cb d1       	rcall	.+918    	; 0x1554 <sysclk_enable_module>
    11be:	47 c0       	rjmp	.+142    	; 0x124e <initializespi+0x20e>
    11c0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    11c2:	e8 e0       	ldi	r30, 0x08	; 8
    11c4:	de 07       	cpc	r29, r30
    11c6:	21 f4       	brne	.+8      	; 0x11d0 <initializespi+0x190>
    11c8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	c3 d1       	rcall	.+902    	; 0x1554 <sysclk_enable_module>
    11ce:	3f c0       	rjmp	.+126    	; 0x124e <initializespi+0x20e>
    11d0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    11d2:	f9 e0       	ldi	r31, 0x09	; 9
    11d4:	df 07       	cpc	r29, r31
    11d6:	21 f4       	brne	.+8      	; 0x11e0 <initializespi+0x1a0>
    11d8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    11da:	84 e0       	ldi	r24, 0x04	; 4
    11dc:	bb d1       	rcall	.+886    	; 0x1554 <sysclk_enable_module>
    11de:	37 c0       	rjmp	.+110    	; 0x124e <initializespi+0x20e>
    11e0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	d8 07       	cpc	r29, r24
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <initializespi+0x1b0>
    11e8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	b3 d1       	rcall	.+870    	; 0x1554 <sysclk_enable_module>
    11ee:	2f c0       	rjmp	.+94     	; 0x124e <initializespi+0x20e>
    11f0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    11f2:	eb e0       	ldi	r30, 0x0B	; 11
    11f4:	de 07       	cpc	r29, r30
    11f6:	21 f4       	brne	.+8      	; 0x1200 <initializespi+0x1c0>
    11f8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11fa:	86 e0       	ldi	r24, 0x06	; 6
    11fc:	ab d1       	rcall	.+854    	; 0x1554 <sysclk_enable_module>
    11fe:	27 c0       	rjmp	.+78     	; 0x124e <initializespi+0x20e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1200:	c0 3b       	cpi	r28, 0xB0	; 176
    1202:	f8 e0       	ldi	r31, 0x08	; 8
    1204:	df 07       	cpc	r29, r31
    1206:	21 f4       	brne	.+8      	; 0x1210 <initializespi+0x1d0>
    1208:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	a3 d1       	rcall	.+838    	; 0x1554 <sysclk_enable_module>
    120e:	1f c0       	rjmp	.+62     	; 0x124e <initializespi+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1210:	c0 3b       	cpi	r28, 0xB0	; 176
    1212:	89 e0       	ldi	r24, 0x09	; 9
    1214:	d8 07       	cpc	r29, r24
    1216:	21 f4       	brne	.+8      	; 0x1220 <initializespi+0x1e0>
    1218:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    121a:	84 e0       	ldi	r24, 0x04	; 4
    121c:	9b d1       	rcall	.+822    	; 0x1554 <sysclk_enable_module>
    121e:	17 c0       	rjmp	.+46     	; 0x124e <initializespi+0x20e>
    1220:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1222:	ea e0       	ldi	r30, 0x0A	; 10
    1224:	de 07       	cpc	r29, r30
    1226:	21 f4       	brne	.+8      	; 0x1230 <initializespi+0x1f0>
    1228:	60 e2       	ldi	r22, 0x20	; 32
    122a:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    122c:	93 d1       	rcall	.+806    	; 0x1554 <sysclk_enable_module>
    122e:	0f c0       	rjmp	.+30     	; 0x124e <initializespi+0x20e>
    1230:	c0 38       	cpi	r28, 0x80	; 128
    1232:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1234:	df 07       	cpc	r29, r31
    1236:	21 f4       	brne	.+8      	; 0x1240 <initializespi+0x200>
    1238:	60 e4       	ldi	r22, 0x40	; 64
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	8b d1       	rcall	.+790    	; 0x1554 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    123e:	07 c0       	rjmp	.+14     	; 0x124e <initializespi+0x20e>
    1240:	c0 3a       	cpi	r28, 0xA0	; 160
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1246:	19 f4       	brne	.+6      	; 0x124e <initializespi+0x20e>
    1248:	60 e4       	ldi	r22, 0x40	; 64
    124a:	85 e0       	ldi	r24, 0x05	; 5
    124c:	83 d1       	rcall	.+774    	; 0x1554 <sysclk_enable_module>
	*	Initialize pins
	*		MOSI direction to out (Master out, slave in) (pin 5)
	*		MISO direction to in (Master in, slave out) (pin 6)
	*		SCK direction to out? (clock) (pin 7)
	*/
	port->DIRSET |= 0b10110000;  //4 (default SS), 5 (MOSI) & 7 (SCK) to out
    124e:	f8 01       	movw	r30, r16
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	80 6b       	ori	r24, 0xB0	; 176
    1254:	81 83       	std	Z+1, r24	; 0x01
	port->DIRSET &= 0b10111111; //6 (MISO) in
    1256:	81 81       	ldd	r24, Z+1	; 0x01
    1258:	8f 7b       	andi	r24, 0xBF	; 191
    125a:	81 83       	std	Z+1, r24	; 0x01
	port->OUT |= 0b10110000; //Setting 4 to high deselects it, in case it isn't the select we're using
    125c:	84 81       	ldd	r24, Z+4	; 0x04
    125e:	80 6b       	ori	r24, 0xB0	; 176
    1260:	84 83       	std	Z+4, r24	; 0x04
	port->IN &= 0b10111111;
    1262:	80 85       	ldd	r24, Z+8	; 0x08
    1264:	8f 7b       	andi	r24, 0xBF	; 191
    1266:	80 87       	std	Z+8, r24	; 0x08
	*	6 coefficients are stored in PROM, use them for converting data from D1 and D2 into accurate temperature and pressure
	*	Clock polarity and phase modes 0 and 3 are both acceptable
	*
	*/

	targetspi->CTRL = 0b11010000;
    1268:	80 ed       	ldi	r24, 0xD0	; 208
    126a:	88 83       	st	Y, r24
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <__portable_avr_delay_cycles>:
	spi_select_device(&SPIE, &spec_spi_conf);
	spi_write_packet(&SPIE, buffer, 3);
	spi_deselect_device(&SPIE, &spec_spi_conf);
	pixel_count = 0;
	image_done = false;
}
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <__portable_avr_delay_cycles+0xa>
    1278:	61 50       	subi	r22, 0x01	; 1
    127a:	71 09       	sbc	r23, r1
    127c:	81 09       	sbc	r24, r1
    127e:	91 09       	sbc	r25, r1
    1280:	61 15       	cp	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	81 05       	cpc	r24, r1
    1286:	91 05       	cpc	r25, r1
    1288:	b9 f7       	brne	.-18     	; 0x1278 <__portable_avr_delay_cycles+0x2>
    128a:	08 95       	ret

0000128c <spectrometer_reset>:

/* If FIFO_RST is brought high, the spectrometer will reset, allowing for a new image to be taken. */
void spectrometer_reset(void){
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1292:	c0 e8       	ldi	r28, 0x80	; 128
    1294:	d6 e0       	ldi	r29, 0x06	; 6
    1296:	10 e1       	ldi	r17, 0x10	; 16
    1298:	1d 83       	std	Y+5, r17	; 0x05
	ioport_set_pin_high(IOPORT_CREATE_PIN(PORTE, FIFO_RST));
	delay_ms(1);
    129a:	66 ed       	ldi	r22, 0xD6	; 214
    129c:	74 e1       	ldi	r23, 0x14	; 20
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	e9 df       	rcall	.-46     	; 0x1276 <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12a4:	1e 83       	std	Y+6, r17	; 0x06
	ioport_set_pin_low(IOPORT_CREATE_PIN(PORTE, FIFO_RST));
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	08 95       	ret

000012ae <spectrometer_read>:

/* Bring FIFO_CS low, read in the 2 byte pixel, then put FIFO_CS back to high. */
void spectrometer_read(void){
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	c0 e8       	ldi	r28, 0x80	; 128
    12b6:	d6 e0       	ldi	r29, 0x06	; 6
    12b8:	12 e0       	ldi	r17, 0x02	; 2
    12ba:	1e 83       	std	Y+6, r17	; 0x06
	ioport_set_pin_low(IOPORT_CREATE_PIN(PORTE, FIFO_CS));
	
	spi_select_device(&SPIE, &spec_spi_conf);
    12bc:	68 e6       	ldi	r22, 0x68	; 104
    12be:	70 e3       	ldi	r23, 0x30	; 48
    12c0:	80 ec       	ldi	r24, 0xC0	; 192
    12c2:	9a e0       	ldi	r25, 0x0A	; 10
    12c4:	e6 d0       	rcall	.+460    	; 0x1492 <spi_select_device>
	spi_read_packet(&SPIE, pixel, 2);
    12c6:	42 e0       	ldi	r20, 0x02	; 2
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	64 e6       	ldi	r22, 0x64	; 100
    12cc:	70 e3       	ldi	r23, 0x30	; 48
    12ce:	80 ec       	ldi	r24, 0xC0	; 192
    12d0:	9a e0       	ldi	r25, 0x0A	; 10
    12d2:	cc d0       	rcall	.+408    	; 0x146c <spi_read_packet>
	spi_deselect_device(&SPIE, &spec_spi_conf);
    12d4:	68 e6       	ldi	r22, 0x68	; 104
    12d6:	70 e3       	ldi	r23, 0x30	; 48
    12d8:	80 ec       	ldi	r24, 0xC0	; 192
    12da:	9a e0       	ldi	r25, 0x0A	; 10
    12dc:	f0 d0       	rcall	.+480    	; 0x14be <spi_deselect_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12de:	1d 83       	std	Y+5, r17	; 0x05
	
	ioport_set_pin_high(IOPORT_CREATE_PIN(PORTE, FIFO_CS));
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	08 95       	ret

000012e8 <__vector_43>:
#define MISO PIN5_bm
#define MOSI PIN6_bm
#define SPI_CLK PIN7_bm

/* PIXEL INTERRUPT */
ISR(PORTE_INT0_vect){
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	0b b6       	in	r0, 0x3b	; 59
    12f4:	0f 92       	push	r0
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	cf 93       	push	r28
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1310:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1312:	f8 94       	cli
		
		spectrometer_read(); //	reads in the 16-bit pixel
    1314:	cc df       	rcall	.-104    	; 0x12ae <spectrometer_read>
		image[pixel_count]  = (uint16_t) (pixel[0] << 8) | pixel[1];
    1316:	20 91 62 30 	lds	r18, 0x3062	; 0x803062 <pixel_count>
    131a:	30 91 63 30 	lds	r19, 0x3063	; 0x803063 <pixel_count+0x1>
    131e:	f9 01       	movw	r30, r18
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 59       	subi	r30, 0x9E	; 158
    1326:	ff 4d       	sbci	r31, 0xDF	; 223
    1328:	a4 e6       	ldi	r26, 0x64	; 100
    132a:	b0 e3       	ldi	r27, 0x30	; 48
    132c:	8c 91       	ld	r24, X
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	98 2f       	mov	r25, r24
    1332:	88 27       	eor	r24, r24
    1334:	11 96       	adiw	r26, 0x01	; 1
    1336:	4c 91       	ld	r20, X
    1338:	84 2b       	or	r24, r20
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
		if(++pixel_count >= 2048){ // once we've read an entire image, flip the flag
    133e:	c9 01       	movw	r24, r18
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	80 93 62 30 	sts	0x3062, r24	; 0x803062 <pixel_count>
    1346:	90 93 63 30 	sts	0x3063, r25	; 0x803063 <pixel_count+0x1>
    134a:	81 15       	cp	r24, r1
    134c:	98 40       	sbci	r25, 0x08	; 8
    134e:	30 f0       	brcs	.+12     	; 0x135c <__vector_43+0x74>
			image_done = true;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	80 93 66 30 	sts	0x3066, r24	; 0x803066 <image_done>
    1358:	90 93 67 30 	sts	0x3067, r25	; 0x803067 <image_done+0x1>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    135c:	cf bf       	out	0x3f, r28	; 63
		}		
	}
}
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	cf 91       	pop	r28
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0b be       	out	0x3b, r0	; 59
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1388:	61 50       	subi	r22, 0x01	; 1
    138a:	71 09       	sbc	r23, r1
    138c:	81 09       	sbc	r24, r1
    138e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1390:	61 15       	cp	r22, r1
    1392:	71 05       	cpc	r23, r1
    1394:	81 05       	cpc	r24, r1
    1396:	91 05       	cpc	r25, r1
    1398:	b9 f7       	brne	.-18     	; 0x1388 <__portable_avr_delay_cycles+0x2>
    139a:	08 95       	ret

0000139c <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    13a2:	0e 94 41 01 	call	0x282	; 0x282 <usart_getchar>
    13a6:	88 83       	st	Y, r24
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    13ae:	0c 94 39 01 	jmp	0x272	; 0x272 <usart_putchar>
}
    13b2:	08 95       	ret

000013b4 <console_init>:
 */ 

#include "usart_console.h"

void console_init()
{
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	27 97       	sbiw	r28, 0x07	; 7
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    13c2:	60 e2       	ldi	r22, 0x20	; 32
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	c6 d0       	rcall	.+396    	; 0x1554 <sysclk_enable_module>
		.charlength =	USART_SERIAL_CHAR_LEN,
		.paritytype =	USART_SERIAL_PARITY,
		.stopbits	=	USART_SERIAL_STOP_BIT
	};
	
	PORTD.DIR |= USART_TX_PIN;	//set the USART transmit pin to output
    13c8:	e0 e6       	ldi	r30, 0x60	; 96
    13ca:	f6 e0       	ldi	r31, 0x06	; 6
    13cc:	80 81       	ld	r24, Z
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    13d2:	80 eb       	ldi	r24, 0xB0	; 176
    13d4:	99 e0       	ldi	r25, 0x09	; 9
    13d6:	80 93 6b 30 	sts	0x306B, r24	; 0x80306b <stdio_base>
    13da:	90 93 6c 30 	sts	0x306C, r25	; 0x80306c <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    13de:	87 ed       	ldi	r24, 0xD7	; 215
    13e0:	99 e0       	ldi	r25, 0x09	; 9
    13e2:	80 93 69 30 	sts	0x3069, r24	; 0x803069 <ptr_put>
    13e6:	90 93 6a 30 	sts	0x306A, r25	; 0x80306a <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    13ea:	8e ec       	ldi	r24, 0xCE	; 206
    13ec:	99 e0       	ldi	r25, 0x09	; 9
    13ee:	80 93 60 20 	sts	0x2060, r24	; 0x802060 <__data_end>
    13f2:	90 93 61 20 	sts	0x2061, r25	; 0x802061 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    13f6:	e6 e0       	ldi	r30, 0x06	; 6
    13f8:	f0 e2       	ldi	r31, 0x20	; 32
    13fa:	84 81       	ldd	r24, Z+4	; 0x04
    13fc:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    13fe:	85 81       	ldd	r24, Z+5	; 0x05
    1400:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1402:	86 81       	ldd	r24, Z+6	; 0x06
    1404:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	a2 81       	ldd	r26, Z+2	; 0x02
    140c:	b3 81       	ldd	r27, Z+3	; 0x03
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	ab 83       	std	Y+3, r26	; 0x03
    1414:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    1416:	60 e2       	ldi	r22, 0x20	; 32
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	9c d0       	rcall	.+312    	; 0x1554 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    141c:	be 01       	movw	r22, r28
    141e:	6f 5f       	subi	r22, 0xFF	; 255
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	80 eb       	ldi	r24, 0xB0	; 176
    1424:	99 e0       	ldi	r25, 0x09	; 9
    1426:	46 d8       	rcall	.-3956   	; 0x4b4 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1428:	60 e2       	ldi	r22, 0x20	; 32
    142a:	71 e0       	ldi	r23, 0x01	; 1
    142c:	84 e2       	ldi	r24, 0x24	; 36
    142e:	9a e0       	ldi	r25, 0x0A	; 10
    1430:	c4 d3       	rcall	.+1928   	; 0x1bba <fdevopen>
	
	stdio_serial_init(USART_SERIAL, &usart_config); //function maps the serial output to printf, not nessecary to know how it works
	
	
	delay_us(1); //apparently need to slow down before print @32MHz
    1432:	66 e0       	ldi	r22, 0x06	; 6
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a5 df       	rcall	.-182    	; 0x1386 <__portable_avr_delay_cycles>
    143c:	27 96       	adiw	r28, 0x07	; 7
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1448:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    144a:	80 91 6b 30 	lds	r24, 0x306B	; 0x80306b <stdio_base>
    144e:	90 91 6c 30 	lds	r25, 0x306C	; 0x80306c <stdio_base+0x1>
    1452:	e0 91 69 30 	lds	r30, 0x3069	; 0x803069 <ptr_put>
    1456:	f0 91 6a 30 	lds	r31, 0x306A	; 0x80306a <ptr_put+0x1>
    145a:	19 95       	eicall
    145c:	99 23       	and	r25, r25
    145e:	1c f0       	brlt	.+6      	; 0x1466 <_write+0x1e>
		return -1;
	}
	return 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    146a:	08 95       	ret

0000146c <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
    146c:	fc 01       	movw	r30, r24
    146e:	db 01       	movw	r26, r22
	while (len--) {
    1470:	41 15       	cp	r20, r1
    1472:	51 05       	cpc	r21, r1
    1474:	61 f0       	breq	.+24     	; 0x148e <spi_read_packet+0x22>
    1476:	46 0f       	add	r20, r22
    1478:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    147a:	2f ef       	ldi	r18, 0xFF	; 255
    147c:	23 83       	std	Z+3, r18	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    147e:	92 81       	ldd	r25, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
    1480:	99 23       	and	r25, r25
    1482:	ec f7       	brge	.-6      	; 0x147e <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
    1484:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
    1486:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
    1488:	4a 17       	cp	r20, r26
    148a:	5b 07       	cpc	r21, r27
    148c:	b9 f7       	brne	.-18     	; 0x147c <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	08 95       	ret

00001492 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    1492:	fb 01       	movw	r30, r22
    1494:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1496:	e8 2f       	mov	r30, r24
    1498:	e6 95       	lsr	r30
    149a:	e6 95       	lsr	r30
    149c:	e6 95       	lsr	r30
    149e:	40 e2       	ldi	r20, 0x20	; 32
    14a0:	e4 9f       	mul	r30, r20
    14a2:	f0 01       	movw	r30, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    14a8:	87 70       	andi	r24, 0x07	; 7
    14aa:	21 e0       	ldi	r18, 0x01	; 1
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	a9 01       	movw	r20, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <spi_select_device+0x24>
    14b2:	44 0f       	add	r20, r20
    14b4:	55 1f       	adc	r21, r21
    14b6:	8a 95       	dec	r24
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    14ba:	46 83       	std	Z+6, r20	; 0x06
    14bc:	08 95       	ret

000014be <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    14be:	fb 01       	movw	r30, r22
    14c0:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    14c2:	e8 2f       	mov	r30, r24
    14c4:	e6 95       	lsr	r30
    14c6:	e6 95       	lsr	r30
    14c8:	e6 95       	lsr	r30
    14ca:	40 e2       	ldi	r20, 0x20	; 32
    14cc:	e4 9f       	mul	r30, r20
    14ce:	f0 01       	movw	r30, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    14d4:	87 70       	andi	r24, 0x07	; 7
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	a9 01       	movw	r20, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <spi_deselect_device+0x24>
    14de:	44 0f       	add	r20, r20
    14e0:	55 1f       	adc	r21, r21
    14e2:	8a 95       	dec	r24
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    14e6:	45 83       	std	Z+5, r20	; 0x05
    14e8:	08 95       	ret

000014ea <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	1f 92       	push	r1
    14f0:	1f 92       	push	r1
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    14fc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1500:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1504:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1508:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    150c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1510:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1514:	8f b7       	in	r24, 0x3f	; 63
    1516:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1518:	f8 94       	cli
	return flags;
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    151c:	e0 e5       	ldi	r30, 0x50	; 80
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	82 60       	ori	r24, 0x02	; 2
    1524:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1526:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1528:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    152a:	81 ff       	sbrs	r24, 1
    152c:	fd cf       	rjmp	.-6      	; 0x1528 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	80 e4       	ldi	r24, 0x40	; 64
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	45 d0       	rcall	.+138    	; 0x15c0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1536:	8f b7       	in	r24, 0x3f	; 63
    1538:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    153a:	f8 94       	cli
	return flags;
    153c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    153e:	e0 e5       	ldi	r30, 0x50	; 80
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1548:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	1f 92       	push	r1
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    155e:	9f b7       	in	r25, 0x3f	; 63
    1560:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1562:	f8 94       	cli
	return flags;
    1564:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1566:	e8 2f       	mov	r30, r24
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	e0 59       	subi	r30, 0x90	; 144
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 95       	com	r22
    1570:	80 81       	ld	r24, Z
    1572:	68 23       	and	r22, r24
    1574:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1576:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1578:	0f 90       	pop	r0
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <wdt_set_timeout_period>:
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    1580:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1584:	24 e0       	ldi	r18, 0x04	; 4
    1586:	82 9f       	mul	r24, r18
    1588:	b0 01       	movw	r22, r0
    158a:	11 24       	eor	r1, r1
    158c:	6c 73       	andi	r22, 0x3C	; 60
    158e:	92 70       	andi	r25, 0x02	; 2
    1590:	91 60       	ori	r25, 0x01	; 1
    1592:	69 2b       	or	r22, r25
    1594:	80 e8       	ldi	r24, 0x80	; 128
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	13 d0       	rcall	.+38     	; 0x15c0 <ccp_write_io>
    159a:	e0 e8       	ldi	r30, 0x80	; 128
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	80 fd       	sbrc	r24, 0
    15a2:	fd cf       	rjmp	.-6      	; 0x159e <wdt_set_timeout_period+0x1e>
    15a4:	08 95       	ret

000015a6 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
    15a6:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    15aa:	6c 73       	andi	r22, 0x3C	; 60
    15ac:	63 60       	ori	r22, 0x03	; 3
    15ae:	80 e8       	ldi	r24, 0x80	; 128
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	06 d0       	rcall	.+12     	; 0x15c0 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
    15b4:	e0 e8       	ldi	r30, 0x80	; 128
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	80 fd       	sbrc	r24, 0
    15bc:	fd cf       	rjmp	.-6      	; 0x15b8 <wdt_enable+0x12>
	wdt_wait_while_busy();
}
    15be:	08 95       	ret

000015c0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    15c0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    15c2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    15c4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    15c6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    15c8:	60 83       	st	Z, r22
	ret                             // Return to caller
    15ca:	08 95       	ret

000015cc <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    15cc:	08 95       	ret

000015ce <main>:

MS56XX_t pressure_sensor;
static void system_initialize(void);

int main (void)
{	
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	6a 97       	sbiw	r28, 0x1a	; 26
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	de bf       	out	0x3e, r29	; 62
	sysclk_init();
    15dc:	86 df       	rcall	.-244    	; 0x14ea <sysclk_init>
	board_init();
    15de:	f6 df       	rcall	.-20     	; 0x15cc <board_init>
		
}

static void system_initialize(void)
{
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8CLK);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
	wdt_enable();
    15e2:	ce df       	rcall	.-100    	; 0x1580 <wdt_set_timeout_period>
    15e4:	e0 df       	rcall	.-64     	; 0x15a6 <wdt_enable>
	
	console_init(); //initialize usart for console
    15e6:	e6 de       	rcall	.-564    	; 0x13b4 <console_init>
    15e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	
	//Only check for watchdog WARNING: only wdt reset cause will be reset
	if (reset_cause_is_watchdog())
    15ec:	83 ff       	sbrs	r24, 3
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <main+0x2e>
	{
		printf("WARNING: watchdog timer caused the cpu to be reset\r\n");
    15f0:	8d e0       	ldi	r24, 0x0D	; 13
    15f2:	90 e2       	ldi	r25, 0x20	; 32
    15f4:	44 d3       	rcall	.+1672   	; 0x1c7e <puts>
    15f6:	88 e0       	ldi	r24, 0x08	; 8
	return (reset_cause_t)RST.STATUS;
}

static inline void reset_cause_clear_causes(reset_cause_t causes)
{
	RST.STATUS = causes;
    15f8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    15fc:	24 e1       	ldi	r18, 0x14	; 20
	
	//printf("Console USART initialized...\r\n");
	//printf("System initialized...\r\n");
	
	//spectrometer_init();
	pressure_sensor = define_new_MS56XX_default_OSR(MS5607, &SPIC, PRESSURE_SELECT_PIN);
    15fe:	40 ec       	ldi	r20, 0xC0	; 192
    1600:	58 e0       	ldi	r21, 0x08	; 8
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	ce 01       	movw	r24, r28
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	c5 d8       	rcall	.-3702   	; 0x794 <define_new_MS56XX_default_OSR>
    160a:	8a e1       	ldi	r24, 0x1A	; 26
    160c:	fe 01       	movw	r30, r28
    160e:	31 96       	adiw	r30, 0x01	; 1
    1610:	ad e6       	ldi	r26, 0x6D	; 109
    1612:	b0 e3       	ldi	r27, 0x30	; 48
    1614:	01 90       	ld	r0, Z+
    1616:	0d 92       	st	X+, r0
    1618:	8a 95       	dec	r24
    161a:	e1 f7       	brne	.-8      	; 0x1614 <main+0x46>
	
	initializespi(&SPIC, &PORTC);
    161c:	60 e4       	ldi	r22, 0x40	; 64
    161e:	76 e0       	ldi	r23, 0x06	; 6
    1620:	80 ec       	ldi	r24, 0xC0	; 192
    1622:	98 e0       	ldi	r25, 0x08	; 8
	enable_select_pin(pressure_sensor.select_pin);
    1624:	0d dd       	rcall	.-1510   	; 0x1040 <initializespi>
    1626:	80 91 6d 30 	lds	r24, 0x306D	; 0x80306d <pressure_sensor>
    162a:	f5 dc       	rcall	.-1558   	; 0x1016 <enable_select_pin>
	
	//Pressure sensor initialization routine, also reads calibration data from sensor
	calibratePressureSensor(&pressure_sensor);
    162c:	8d e6       	ldi	r24, 0x6D	; 109
    162e:	90 e3       	ldi	r25, 0x30	; 48
    1630:	d0 d8       	rcall	.-3680   	; 0x7d2 <calibratePressureSensor>
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    1632:	87 e0       	ldi	r24, 0x07	; 7
    1634:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	
	sei(); //set enable interrupts
    1638:	78 94       	sei
	
	//printf("Global interrupts enabled...\r\n");
	
	printf("Application begin...\r\n");
    163a:	81 e4       	ldi	r24, 0x41	; 65
    163c:	90 e2       	ldi	r25, 0x20	; 32
    163e:	1f d3       	rcall	.+1598   	; 0x1c7e <puts>
    1640:	0f 2e       	mov	r0, r31
	{
		if (image_done)		
		{
			spectrometer_reset();
			readMS56XX(&pressure_sensor);
			printf("%li,", pressure_sensor.data.pressure);
    1642:	f7 e5       	ldi	r31, 0x57	; 87
    1644:	af 2e       	mov	r10, r31
    1646:	f0 e2       	ldi	r31, 0x20	; 32
    1648:	bf 2e       	mov	r11, r31
    164a:	f0 2d       	mov	r31, r0
    164c:	0f 2e       	mov	r0, r31
    164e:	f2 e6       	ldi	r31, 0x62	; 98
    1650:	cf 2e       	mov	r12, r31
    1652:	f0 e3       	ldi	r31, 0x30	; 48
    1654:	df 2e       	mov	r13, r31
    1656:	f0 2d       	mov	r31, r0
    1658:	0f 2e       	mov	r0, r31
			for (uint16_t i = 0; i < 2048; i++)
			{
				printf("%u,", image[i]);
    165a:	fc e5       	ldi	r31, 0x5C	; 92
    165c:	ef 2e       	mov	r14, r31
    165e:	f0 e2       	ldi	r31, 0x20	; 32
    1660:	ff 2e       	mov	r15, r31

	system_initialize();

	for (;;)
	{
		if (image_done)		
    1662:	f0 2d       	mov	r31, r0
    1664:	80 91 66 30 	lds	r24, 0x3066	; 0x803066 <image_done>
    1668:	90 91 67 30 	lds	r25, 0x3067	; 0x803067 <image_done+0x1>
    166c:	89 2b       	or	r24, r25
		{
			spectrometer_reset();
    166e:	69 f1       	breq	.+90     	; 0x16ca <main+0xfc>
    1670:	0d de       	rcall	.-998    	; 0x128c <spectrometer_reset>
			readMS56XX(&pressure_sensor);
    1672:	8d e6       	ldi	r24, 0x6D	; 109
    1674:	90 e3       	ldi	r25, 0x30	; 48
    1676:	52 d9       	rcall	.-3420   	; 0x91c <readMS56XX>
			printf("%li,", pressure_sensor.data.pressure);
    1678:	ed e6       	ldi	r30, 0x6D	; 109
    167a:	f0 e3       	ldi	r31, 0x30	; 48
    167c:	87 81       	ldd	r24, Z+7	; 0x07
    167e:	8f 93       	push	r24
    1680:	86 81       	ldd	r24, Z+6	; 0x06
    1682:	8f 93       	push	r24
    1684:	85 81       	ldd	r24, Z+5	; 0x05
    1686:	8f 93       	push	r24
    1688:	84 81       	ldd	r24, Z+4	; 0x04
    168a:	8f 93       	push	r24
    168c:	bf 92       	push	r11
    168e:	af 92       	push	r10
    1690:	de d2       	rcall	.+1468   	; 0x1c4e <printf>
    1692:	02 e6       	ldi	r16, 0x62	; 98
    1694:	10 e2       	ldi	r17, 0x20	; 32
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
			for (uint16_t i = 0; i < 2048; i++)
			{
				printf("%u,", image[i]);
    16a2:	f8 01       	movw	r30, r16
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	0e 5f       	subi	r16, 0xFE	; 254
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	9f 93       	push	r25
    16ae:	8f 93       	push	r24
    16b0:	ff 92       	push	r15
    16b2:	ef 92       	push	r14
    16b4:	cc d2       	rcall	.+1432   	; 0x1c4e <printf>
		if (image_done)		
		{
			spectrometer_reset();
			readMS56XX(&pressure_sensor);
			printf("%li,", pressure_sensor.data.pressure);
			for (uint16_t i = 0; i < 2048; i++)
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0c 15       	cp	r16, r12
    16c0:	1d 05       	cpc	r17, r13
    16c2:	79 f7       	brne	.-34     	; 0x16a2 <main+0xd4>
			{
				printf("%u,", image[i]);
			}
			printf("\n");
    16c4:	8a e0       	ldi	r24, 0x0A	; 10
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	d5 d2       	rcall	.+1450   	; 0x1c74 <putchar>
    16ca:	a8 95       	wdr
		}
		wdt_reset();		
    16cc:	cb cf       	rjmp	.-106    	; 0x1664 <main+0x96>

000016ce <__divsf3>:
	}
    16ce:	0c d0       	rcall	.+24     	; 0x16e8 <__divsf3x>
    16d0:	05 c1       	rjmp	.+522    	; 0x18dc <__fp_round>
    16d2:	fd d0       	rcall	.+506    	; 0x18ce <__fp_pscB>
    16d4:	40 f0       	brcs	.+16     	; 0x16e6 <__divsf3+0x18>
    16d6:	f4 d0       	rcall	.+488    	; 0x18c0 <__fp_pscA>
    16d8:	30 f0       	brcs	.+12     	; 0x16e6 <__divsf3+0x18>
    16da:	21 f4       	brne	.+8      	; 0x16e4 <__divsf3+0x16>
    16dc:	5f 3f       	cpi	r21, 0xFF	; 255
    16de:	19 f0       	breq	.+6      	; 0x16e6 <__divsf3+0x18>
    16e0:	d6 c0       	rjmp	.+428    	; 0x188e <__fp_inf>
    16e2:	51 11       	cpse	r21, r1
    16e4:	2f c1       	rjmp	.+606    	; 0x1944 <__fp_szero>
    16e6:	d9 c0       	rjmp	.+434    	; 0x189a <__fp_nan>

000016e8 <__divsf3x>:
    16e8:	0a d1       	rcall	.+532    	; 0x18fe <__fp_split3>
    16ea:	98 f3       	brcs	.-26     	; 0x16d2 <__divsf3+0x4>

000016ec <__divsf3_pse>:
    16ec:	99 23       	and	r25, r25
    16ee:	c9 f3       	breq	.-14     	; 0x16e2 <__divsf3+0x14>
    16f0:	55 23       	and	r21, r21
    16f2:	b1 f3       	breq	.-20     	; 0x16e0 <__divsf3+0x12>
    16f4:	95 1b       	sub	r25, r21
    16f6:	55 0b       	sbc	r21, r21
    16f8:	bb 27       	eor	r27, r27
    16fa:	aa 27       	eor	r26, r26
    16fc:	62 17       	cp	r22, r18
    16fe:	73 07       	cpc	r23, r19
    1700:	84 07       	cpc	r24, r20
    1702:	38 f0       	brcs	.+14     	; 0x1712 <__divsf3_pse+0x26>
    1704:	9f 5f       	subi	r25, 0xFF	; 255
    1706:	5f 4f       	sbci	r21, 0xFF	; 255
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	44 1f       	adc	r20, r20
    170e:	aa 1f       	adc	r26, r26
    1710:	a9 f3       	breq	.-22     	; 0x16fc <__divsf3_pse+0x10>
    1712:	33 d0       	rcall	.+102    	; 0x177a <__divsf3_pse+0x8e>
    1714:	0e 2e       	mov	r0, r30
    1716:	3a f0       	brmi	.+14     	; 0x1726 <__divsf3_pse+0x3a>
    1718:	e0 e8       	ldi	r30, 0x80	; 128
    171a:	30 d0       	rcall	.+96     	; 0x177c <__divsf3_pse+0x90>
    171c:	91 50       	subi	r25, 0x01	; 1
    171e:	50 40       	sbci	r21, 0x00	; 0
    1720:	e6 95       	lsr	r30
    1722:	00 1c       	adc	r0, r0
    1724:	ca f7       	brpl	.-14     	; 0x1718 <__divsf3_pse+0x2c>
    1726:	29 d0       	rcall	.+82     	; 0x177a <__divsf3_pse+0x8e>
    1728:	fe 2f       	mov	r31, r30
    172a:	27 d0       	rcall	.+78     	; 0x177a <__divsf3_pse+0x8e>
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	bb 1f       	adc	r27, r27
    1734:	26 17       	cp	r18, r22
    1736:	37 07       	cpc	r19, r23
    1738:	48 07       	cpc	r20, r24
    173a:	ab 07       	cpc	r26, r27
    173c:	b0 e8       	ldi	r27, 0x80	; 128
    173e:	09 f0       	breq	.+2      	; 0x1742 <__divsf3_pse+0x56>
    1740:	bb 0b       	sbc	r27, r27
    1742:	80 2d       	mov	r24, r0
    1744:	bf 01       	movw	r22, r30
    1746:	ff 27       	eor	r31, r31
    1748:	93 58       	subi	r25, 0x83	; 131
    174a:	5f 4f       	sbci	r21, 0xFF	; 255
    174c:	2a f0       	brmi	.+10     	; 0x1758 <__divsf3_pse+0x6c>
    174e:	9e 3f       	cpi	r25, 0xFE	; 254
    1750:	51 05       	cpc	r21, r1
    1752:	68 f0       	brcs	.+26     	; 0x176e <__divsf3_pse+0x82>
    1754:	9c c0       	rjmp	.+312    	; 0x188e <__fp_inf>
    1756:	f6 c0       	rjmp	.+492    	; 0x1944 <__fp_szero>
    1758:	5f 3f       	cpi	r21, 0xFF	; 255
    175a:	ec f3       	brlt	.-6      	; 0x1756 <__divsf3_pse+0x6a>
    175c:	98 3e       	cpi	r25, 0xE8	; 232
    175e:	dc f3       	brlt	.-10     	; 0x1756 <__divsf3_pse+0x6a>
    1760:	86 95       	lsr	r24
    1762:	77 95       	ror	r23
    1764:	67 95       	ror	r22
    1766:	b7 95       	ror	r27
    1768:	f7 95       	ror	r31
    176a:	9f 5f       	subi	r25, 0xFF	; 255
    176c:	c9 f7       	brne	.-14     	; 0x1760 <__divsf3_pse+0x74>
    176e:	88 0f       	add	r24, r24
    1770:	91 1d       	adc	r25, r1
    1772:	96 95       	lsr	r25
    1774:	87 95       	ror	r24
    1776:	97 f9       	bld	r25, 7
    1778:	08 95       	ret
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	bb 1f       	adc	r27, r27
    1784:	62 17       	cp	r22, r18
    1786:	73 07       	cpc	r23, r19
    1788:	84 07       	cpc	r24, r20
    178a:	ba 07       	cpc	r27, r26
    178c:	20 f0       	brcs	.+8      	; 0x1796 <__divsf3_pse+0xaa>
    178e:	62 1b       	sub	r22, r18
    1790:	73 0b       	sbc	r23, r19
    1792:	84 0b       	sbc	r24, r20
    1794:	ba 0b       	sbc	r27, r26
    1796:	ee 1f       	adc	r30, r30
    1798:	88 f7       	brcc	.-30     	; 0x177c <__divsf3_pse+0x90>
    179a:	e0 95       	com	r30
    179c:	08 95       	ret

0000179e <__fixsfdi>:
    179e:	be e3       	ldi	r27, 0x3E	; 62
    17a0:	04 d0       	rcall	.+8      	; 0x17aa <__fixunssfdi+0x2>
    17a2:	08 f4       	brcc	.+2      	; 0x17a6 <__fixsfdi+0x8>
    17a4:	90 e8       	ldi	r25, 0x80	; 128
    17a6:	08 95       	ret

000017a8 <__fixunssfdi>:
    17a8:	bf e3       	ldi	r27, 0x3F	; 63
    17aa:	22 27       	eor	r18, r18
    17ac:	33 27       	eor	r19, r19
    17ae:	a9 01       	movw	r20, r18
    17b0:	ae d0       	rcall	.+348    	; 0x190e <__fp_splitA>
    17b2:	58 f1       	brcs	.+86     	; 0x180a <__fixunssfdi+0x62>
    17b4:	9f 57       	subi	r25, 0x7F	; 127
    17b6:	40 f1       	brcs	.+80     	; 0x1808 <__fixunssfdi+0x60>
    17b8:	b9 17       	cp	r27, r25
    17ba:	38 f1       	brcs	.+78     	; 0x180a <__fixunssfdi+0x62>
    17bc:	bf e3       	ldi	r27, 0x3F	; 63
    17be:	b9 1b       	sub	r27, r25
    17c0:	99 27       	eor	r25, r25
    17c2:	b8 50       	subi	r27, 0x08	; 8
    17c4:	3a f4       	brpl	.+14     	; 0x17d4 <__fixunssfdi+0x2c>
    17c6:	66 0f       	add	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	88 1f       	adc	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	b3 95       	inc	r27
    17d0:	d2 f3       	brmi	.-12     	; 0x17c6 <__fixunssfdi+0x1e>
    17d2:	16 c0       	rjmp	.+44     	; 0x1800 <__fixunssfdi+0x58>
    17d4:	b8 50       	subi	r27, 0x08	; 8
    17d6:	4a f0       	brmi	.+18     	; 0x17ea <__fixunssfdi+0x42>
    17d8:	23 2f       	mov	r18, r19
    17da:	34 2f       	mov	r19, r20
    17dc:	45 2f       	mov	r20, r21
    17de:	56 2f       	mov	r21, r22
    17e0:	67 2f       	mov	r22, r23
    17e2:	78 2f       	mov	r23, r24
    17e4:	88 27       	eor	r24, r24
    17e6:	b8 50       	subi	r27, 0x08	; 8
    17e8:	ba f7       	brpl	.-18     	; 0x17d8 <__fixunssfdi+0x30>
    17ea:	b8 5f       	subi	r27, 0xF8	; 248
    17ec:	49 f0       	breq	.+18     	; 0x1800 <__fixunssfdi+0x58>
    17ee:	86 95       	lsr	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	57 95       	ror	r21
    17f6:	47 95       	ror	r20
    17f8:	37 95       	ror	r19
    17fa:	27 95       	ror	r18
    17fc:	ba 95       	dec	r27
    17fe:	b9 f7       	brne	.-18     	; 0x17ee <__fixunssfdi+0x46>
    1800:	0e f4       	brtc	.+2      	; 0x1804 <__fixunssfdi+0x5c>
    1802:	4e d0       	rcall	.+156    	; 0x18a0 <__fp_negdi>
    1804:	88 94       	clc
    1806:	08 95       	ret
    1808:	88 94       	clc
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	cb 01       	movw	r24, r22
    1810:	08 95       	ret

00001812 <__floatundisf>:
    1812:	e8 94       	clt

00001814 <__fp_di2sf>:
    1814:	f9 2f       	mov	r31, r25
    1816:	96 eb       	ldi	r25, 0xB6	; 182
    1818:	ff 23       	and	r31, r31
    181a:	81 f0       	breq	.+32     	; 0x183c <__fp_di2sf+0x28>
    181c:	12 16       	cp	r1, r18
    181e:	13 06       	cpc	r1, r19
    1820:	14 06       	cpc	r1, r20
    1822:	44 0b       	sbc	r20, r20
    1824:	93 95       	inc	r25
    1826:	f6 95       	lsr	r31
    1828:	87 95       	ror	r24
    182a:	77 95       	ror	r23
    182c:	67 95       	ror	r22
    182e:	57 95       	ror	r21
    1830:	40 40       	sbci	r20, 0x00	; 0
    1832:	ff 23       	and	r31, r31
    1834:	b9 f7       	brne	.-18     	; 0x1824 <__fp_di2sf+0x10>
    1836:	1b c0       	rjmp	.+54     	; 0x186e <__fp_di2sf+0x5a>
    1838:	99 27       	eor	r25, r25
    183a:	08 95       	ret
    183c:	88 23       	and	r24, r24
    183e:	51 f4       	brne	.+20     	; 0x1854 <__fp_di2sf+0x40>
    1840:	98 50       	subi	r25, 0x08	; 8
    1842:	d2 f7       	brpl	.-12     	; 0x1838 <__fp_di2sf+0x24>
    1844:	87 2b       	or	r24, r23
    1846:	76 2f       	mov	r23, r22
    1848:	65 2f       	mov	r22, r21
    184a:	54 2f       	mov	r21, r20
    184c:	43 2f       	mov	r20, r19
    184e:	32 2f       	mov	r19, r18
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	b1 f3       	breq	.-20     	; 0x1840 <__fp_di2sf+0x2c>
    1854:	12 16       	cp	r1, r18
    1856:	13 06       	cpc	r1, r19
    1858:	14 06       	cpc	r1, r20
    185a:	44 0b       	sbc	r20, r20
    185c:	88 23       	and	r24, r24
    185e:	3a f0       	brmi	.+14     	; 0x186e <__fp_di2sf+0x5a>
    1860:	9a 95       	dec	r25
    1862:	44 0f       	add	r20, r20
    1864:	55 1f       	adc	r21, r21
    1866:	66 1f       	adc	r22, r22
    1868:	77 1f       	adc	r23, r23
    186a:	88 1f       	adc	r24, r24
    186c:	ca f7       	brpl	.-14     	; 0x1860 <__fp_di2sf+0x4c>
    186e:	55 23       	and	r21, r21
    1870:	4a f4       	brpl	.+18     	; 0x1884 <__fp_di2sf+0x70>
    1872:	44 0f       	add	r20, r20
    1874:	55 1f       	adc	r21, r21
    1876:	11 f4       	brne	.+4      	; 0x187c <__fp_di2sf+0x68>
    1878:	60 ff       	sbrs	r22, 0
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <__fp_di2sf+0x70>
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	8f 4f       	sbci	r24, 0xFF	; 255
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	88 0f       	add	r24, r24
    1886:	96 95       	lsr	r25
    1888:	87 95       	ror	r24
    188a:	97 f9       	bld	r25, 7
    188c:	08 95       	ret

0000188e <__fp_inf>:
    188e:	97 f9       	bld	r25, 7
    1890:	9f 67       	ori	r25, 0x7F	; 127
    1892:	80 e8       	ldi	r24, 0x80	; 128
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	08 95       	ret

0000189a <__fp_nan>:
    189a:	9f ef       	ldi	r25, 0xFF	; 255
    189c:	80 ec       	ldi	r24, 0xC0	; 192
    189e:	08 95       	ret

000018a0 <__fp_negdi>:
    18a0:	90 95       	com	r25
    18a2:	80 95       	com	r24
    18a4:	70 95       	com	r23
    18a6:	60 95       	com	r22
    18a8:	50 95       	com	r21
    18aa:	40 95       	com	r20
    18ac:	30 95       	com	r19
    18ae:	21 95       	neg	r18
    18b0:	3f 4f       	sbci	r19, 0xFF	; 255
    18b2:	4f 4f       	sbci	r20, 0xFF	; 255
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	6f 4f       	sbci	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	8f 4f       	sbci	r24, 0xFF	; 255
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	08 95       	ret

000018c0 <__fp_pscA>:
    18c0:	00 24       	eor	r0, r0
    18c2:	0a 94       	dec	r0
    18c4:	16 16       	cp	r1, r22
    18c6:	17 06       	cpc	r1, r23
    18c8:	18 06       	cpc	r1, r24
    18ca:	09 06       	cpc	r0, r25
    18cc:	08 95       	ret

000018ce <__fp_pscB>:
    18ce:	00 24       	eor	r0, r0
    18d0:	0a 94       	dec	r0
    18d2:	12 16       	cp	r1, r18
    18d4:	13 06       	cpc	r1, r19
    18d6:	14 06       	cpc	r1, r20
    18d8:	05 06       	cpc	r0, r21
    18da:	08 95       	ret

000018dc <__fp_round>:
    18dc:	09 2e       	mov	r0, r25
    18de:	03 94       	inc	r0
    18e0:	00 0c       	add	r0, r0
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <__fp_round+0xc>
    18e4:	88 23       	and	r24, r24
    18e6:	52 f0       	brmi	.+20     	; 0x18fc <__fp_round+0x20>
    18e8:	bb 0f       	add	r27, r27
    18ea:	40 f4       	brcc	.+16     	; 0x18fc <__fp_round+0x20>
    18ec:	bf 2b       	or	r27, r31
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <__fp_round+0x18>
    18f0:	60 ff       	sbrs	r22, 0
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <__fp_round+0x20>
    18f4:	6f 5f       	subi	r22, 0xFF	; 255
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	8f 4f       	sbci	r24, 0xFF	; 255
    18fa:	9f 4f       	sbci	r25, 0xFF	; 255
    18fc:	08 95       	ret

000018fe <__fp_split3>:
    18fe:	57 fd       	sbrc	r21, 7
    1900:	90 58       	subi	r25, 0x80	; 128
    1902:	44 0f       	add	r20, r20
    1904:	55 1f       	adc	r21, r21
    1906:	59 f0       	breq	.+22     	; 0x191e <__fp_splitA+0x10>
    1908:	5f 3f       	cpi	r21, 0xFF	; 255
    190a:	71 f0       	breq	.+28     	; 0x1928 <__fp_splitA+0x1a>
    190c:	47 95       	ror	r20

0000190e <__fp_splitA>:
    190e:	88 0f       	add	r24, r24
    1910:	97 fb       	bst	r25, 7
    1912:	99 1f       	adc	r25, r25
    1914:	61 f0       	breq	.+24     	; 0x192e <__fp_splitA+0x20>
    1916:	9f 3f       	cpi	r25, 0xFF	; 255
    1918:	79 f0       	breq	.+30     	; 0x1938 <__fp_splitA+0x2a>
    191a:	87 95       	ror	r24
    191c:	08 95       	ret
    191e:	12 16       	cp	r1, r18
    1920:	13 06       	cpc	r1, r19
    1922:	14 06       	cpc	r1, r20
    1924:	55 1f       	adc	r21, r21
    1926:	f2 cf       	rjmp	.-28     	; 0x190c <__fp_split3+0xe>
    1928:	46 95       	lsr	r20
    192a:	f1 df       	rcall	.-30     	; 0x190e <__fp_splitA>
    192c:	08 c0       	rjmp	.+16     	; 0x193e <__fp_splitA+0x30>
    192e:	16 16       	cp	r1, r22
    1930:	17 06       	cpc	r1, r23
    1932:	18 06       	cpc	r1, r24
    1934:	99 1f       	adc	r25, r25
    1936:	f1 cf       	rjmp	.-30     	; 0x191a <__fp_splitA+0xc>
    1938:	86 95       	lsr	r24
    193a:	71 05       	cpc	r23, r1
    193c:	61 05       	cpc	r22, r1
    193e:	08 94       	sec
    1940:	08 95       	ret

00001942 <__fp_zero>:
    1942:	e8 94       	clt

00001944 <__fp_szero>:
    1944:	bb 27       	eor	r27, r27
    1946:	66 27       	eor	r22, r22
    1948:	77 27       	eor	r23, r23
    194a:	cb 01       	movw	r24, r22
    194c:	97 f9       	bld	r25, 7
    194e:	08 95       	ret

00001950 <__udivmodsi4>:
    1950:	a1 e2       	ldi	r26, 0x21	; 33
    1952:	1a 2e       	mov	r1, r26
    1954:	aa 1b       	sub	r26, r26
    1956:	bb 1b       	sub	r27, r27
    1958:	fd 01       	movw	r30, r26
    195a:	0d c0       	rjmp	.+26     	; 0x1976 <__udivmodsi4_ep>

0000195c <__udivmodsi4_loop>:
    195c:	aa 1f       	adc	r26, r26
    195e:	bb 1f       	adc	r27, r27
    1960:	ee 1f       	adc	r30, r30
    1962:	ff 1f       	adc	r31, r31
    1964:	a2 17       	cp	r26, r18
    1966:	b3 07       	cpc	r27, r19
    1968:	e4 07       	cpc	r30, r20
    196a:	f5 07       	cpc	r31, r21
    196c:	20 f0       	brcs	.+8      	; 0x1976 <__udivmodsi4_ep>
    196e:	a2 1b       	sub	r26, r18
    1970:	b3 0b       	sbc	r27, r19
    1972:	e4 0b       	sbc	r30, r20
    1974:	f5 0b       	sbc	r31, r21

00001976 <__udivmodsi4_ep>:
    1976:	66 1f       	adc	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	88 1f       	adc	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	1a 94       	dec	r1
    1980:	69 f7       	brne	.-38     	; 0x195c <__udivmodsi4_loop>
    1982:	60 95       	com	r22
    1984:	70 95       	com	r23
    1986:	80 95       	com	r24
    1988:	90 95       	com	r25
    198a:	9b 01       	movw	r18, r22
    198c:	ac 01       	movw	r20, r24
    198e:	bd 01       	movw	r22, r26
    1990:	cf 01       	movw	r24, r30
    1992:	08 95       	ret

00001994 <__muldi3>:
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	1f 93       	push	r17
    199a:	0f 93       	push	r16
    199c:	9a 9d       	mul	r25, r10
    199e:	f0 2d       	mov	r31, r0
    19a0:	21 9f       	mul	r18, r17
    19a2:	f0 0d       	add	r31, r0
    19a4:	8b 9d       	mul	r24, r11
    19a6:	f0 0d       	add	r31, r0
    19a8:	8a 9d       	mul	r24, r10
    19aa:	e0 2d       	mov	r30, r0
    19ac:	f1 0d       	add	r31, r1
    19ae:	03 9f       	mul	r16, r19
    19b0:	f0 0d       	add	r31, r0
    19b2:	02 9f       	mul	r16, r18
    19b4:	e0 0d       	add	r30, r0
    19b6:	f1 1d       	adc	r31, r1
    19b8:	4e 9d       	mul	r20, r14
    19ba:	e0 0d       	add	r30, r0
    19bc:	f1 1d       	adc	r31, r1
    19be:	5e 9d       	mul	r21, r14
    19c0:	f0 0d       	add	r31, r0
    19c2:	4f 9d       	mul	r20, r15
    19c4:	f0 0d       	add	r31, r0
    19c6:	7f 93       	push	r23
    19c8:	6f 93       	push	r22
    19ca:	bf 92       	push	r11
    19cc:	af 92       	push	r10
    19ce:	5f 93       	push	r21
    19d0:	4f 93       	push	r20
    19d2:	d5 01       	movw	r26, r10
    19d4:	e3 d0       	rcall	.+454    	; 0x1b9c <__umulhisi3>
    19d6:	8b 01       	movw	r16, r22
    19d8:	ac 01       	movw	r20, r24
    19da:	d7 01       	movw	r26, r14
    19dc:	df d0       	rcall	.+446    	; 0x1b9c <__umulhisi3>
    19de:	eb 01       	movw	r28, r22
    19e0:	e8 0f       	add	r30, r24
    19e2:	f9 1f       	adc	r31, r25
    19e4:	d6 01       	movw	r26, r12
    19e6:	1f d0       	rcall	.+62     	; 0x1a26 <__muldi3_6>
    19e8:	2f 91       	pop	r18
    19ea:	3f 91       	pop	r19
    19ec:	d6 01       	movw	r26, r12
    19ee:	d6 d0       	rcall	.+428    	; 0x1b9c <__umulhisi3>
    19f0:	c6 0f       	add	r28, r22
    19f2:	d7 1f       	adc	r29, r23
    19f4:	e8 1f       	adc	r30, r24
    19f6:	f9 1f       	adc	r31, r25
    19f8:	af 91       	pop	r26
    19fa:	bf 91       	pop	r27
    19fc:	14 d0       	rcall	.+40     	; 0x1a26 <__muldi3_6>
    19fe:	2f 91       	pop	r18
    1a00:	3f 91       	pop	r19
    1a02:	cc d0       	rcall	.+408    	; 0x1b9c <__umulhisi3>
    1a04:	c6 0f       	add	r28, r22
    1a06:	d7 1f       	adc	r29, r23
    1a08:	e8 1f       	adc	r30, r24
    1a0a:	f9 1f       	adc	r31, r25
    1a0c:	d6 01       	movw	r26, r12
    1a0e:	c6 d0       	rcall	.+396    	; 0x1b9c <__umulhisi3>
    1a10:	e6 0f       	add	r30, r22
    1a12:	f7 1f       	adc	r31, r23
    1a14:	98 01       	movw	r18, r16
    1a16:	be 01       	movw	r22, r28
    1a18:	cf 01       	movw	r24, r30
    1a1a:	11 24       	eor	r1, r1
    1a1c:	0f 91       	pop	r16
    1a1e:	1f 91       	pop	r17
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <__muldi3_6>:
    1a26:	ba d0       	rcall	.+372    	; 0x1b9c <__umulhisi3>
    1a28:	46 0f       	add	r20, r22
    1a2a:	57 1f       	adc	r21, r23
    1a2c:	c8 1f       	adc	r28, r24
    1a2e:	d9 1f       	adc	r29, r25
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <__muldi3_6+0xe>
    1a32:	31 96       	adiw	r30, 0x01	; 1
    1a34:	08 95       	ret

00001a36 <__umoddi3>:
    1a36:	68 94       	set
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <__udivdi3_umoddi3>

00001a3a <__udivdi3>:
    1a3a:	e8 94       	clt

00001a3c <__udivdi3_umoddi3>:
    1a3c:	8f 92       	push	r8
    1a3e:	9f 92       	push	r9
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	05 d0       	rcall	.+10     	; 0x1a50 <__udivmod64>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	9f 90       	pop	r9
    1a4c:	8f 90       	pop	r8
    1a4e:	08 95       	ret

00001a50 <__udivmod64>:
    1a50:	88 24       	eor	r8, r8
    1a52:	99 24       	eor	r9, r9
    1a54:	f4 01       	movw	r30, r8
    1a56:	e4 01       	movw	r28, r8
    1a58:	b0 e4       	ldi	r27, 0x40	; 64
    1a5a:	9f 93       	push	r25
    1a5c:	aa 27       	eor	r26, r26
    1a5e:	9a 15       	cp	r25, r10
    1a60:	8b 04       	cpc	r8, r11
    1a62:	9c 04       	cpc	r9, r12
    1a64:	ed 05       	cpc	r30, r13
    1a66:	fe 05       	cpc	r31, r14
    1a68:	cf 05       	cpc	r28, r15
    1a6a:	d0 07       	cpc	r29, r16
    1a6c:	a1 07       	cpc	r26, r17
    1a6e:	98 f4       	brcc	.+38     	; 0x1a96 <__udivmod64+0x46>
    1a70:	ad 2f       	mov	r26, r29
    1a72:	dc 2f       	mov	r29, r28
    1a74:	cf 2f       	mov	r28, r31
    1a76:	fe 2f       	mov	r31, r30
    1a78:	e9 2d       	mov	r30, r9
    1a7a:	98 2c       	mov	r9, r8
    1a7c:	89 2e       	mov	r8, r25
    1a7e:	98 2f       	mov	r25, r24
    1a80:	87 2f       	mov	r24, r23
    1a82:	76 2f       	mov	r23, r22
    1a84:	65 2f       	mov	r22, r21
    1a86:	54 2f       	mov	r21, r20
    1a88:	43 2f       	mov	r20, r19
    1a8a:	32 2f       	mov	r19, r18
    1a8c:	22 27       	eor	r18, r18
    1a8e:	b8 50       	subi	r27, 0x08	; 8
    1a90:	31 f7       	brne	.-52     	; 0x1a5e <__udivmod64+0xe>
    1a92:	bf 91       	pop	r27
    1a94:	27 c0       	rjmp	.+78     	; 0x1ae4 <__udivmod64+0x94>
    1a96:	1b 2e       	mov	r1, r27
    1a98:	bf 91       	pop	r27
    1a9a:	bb 27       	eor	r27, r27
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	44 1f       	adc	r20, r20
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	66 1f       	adc	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	88 1c       	adc	r8, r8
    1aae:	99 1c       	adc	r9, r9
    1ab0:	ee 1f       	adc	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	cc 1f       	adc	r28, r28
    1ab6:	dd 1f       	adc	r29, r29
    1ab8:	aa 1f       	adc	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	8a 14       	cp	r8, r10
    1abe:	9b 04       	cpc	r9, r11
    1ac0:	ec 05       	cpc	r30, r12
    1ac2:	fd 05       	cpc	r31, r13
    1ac4:	ce 05       	cpc	r28, r14
    1ac6:	df 05       	cpc	r29, r15
    1ac8:	a0 07       	cpc	r26, r16
    1aca:	b1 07       	cpc	r27, r17
    1acc:	48 f0       	brcs	.+18     	; 0x1ae0 <__udivmod64+0x90>
    1ace:	8a 18       	sub	r8, r10
    1ad0:	9b 08       	sbc	r9, r11
    1ad2:	ec 09       	sbc	r30, r12
    1ad4:	fd 09       	sbc	r31, r13
    1ad6:	ce 09       	sbc	r28, r14
    1ad8:	df 09       	sbc	r29, r15
    1ada:	a0 0b       	sbc	r26, r16
    1adc:	b1 0b       	sbc	r27, r17
    1ade:	21 60       	ori	r18, 0x01	; 1
    1ae0:	1a 94       	dec	r1
    1ae2:	e1 f6       	brne	.-72     	; 0x1a9c <__udivmod64+0x4c>
    1ae4:	2e f4       	brtc	.+10     	; 0x1af0 <__udivmod64+0xa0>
    1ae6:	94 01       	movw	r18, r8
    1ae8:	af 01       	movw	r20, r30
    1aea:	be 01       	movw	r22, r28
    1aec:	cd 01       	movw	r24, r26
    1aee:	00 0c       	add	r0, r0
    1af0:	08 95       	ret

00001af2 <__ashldi3>:
    1af2:	0f 93       	push	r16
    1af4:	08 30       	cpi	r16, 0x08	; 8
    1af6:	90 f0       	brcs	.+36     	; 0x1b1c <__ashldi3+0x2a>
    1af8:	98 2f       	mov	r25, r24
    1afa:	87 2f       	mov	r24, r23
    1afc:	76 2f       	mov	r23, r22
    1afe:	65 2f       	mov	r22, r21
    1b00:	54 2f       	mov	r21, r20
    1b02:	43 2f       	mov	r20, r19
    1b04:	32 2f       	mov	r19, r18
    1b06:	22 27       	eor	r18, r18
    1b08:	08 50       	subi	r16, 0x08	; 8
    1b0a:	f4 cf       	rjmp	.-24     	; 0x1af4 <__ashldi3+0x2>
    1b0c:	22 0f       	add	r18, r18
    1b0e:	33 1f       	adc	r19, r19
    1b10:	44 1f       	adc	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	66 1f       	adc	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	0a 95       	dec	r16
    1b1e:	b2 f7       	brpl	.-20     	; 0x1b0c <__ashldi3+0x1a>
    1b20:	0f 91       	pop	r16
    1b22:	08 95       	ret

00001b24 <__ashrdi3>:
    1b24:	97 fb       	bst	r25, 7
    1b26:	10 f8       	bld	r1, 0

00001b28 <__lshrdi3>:
    1b28:	16 94       	lsr	r1
    1b2a:	00 08       	sbc	r0, r0
    1b2c:	0f 93       	push	r16
    1b2e:	08 30       	cpi	r16, 0x08	; 8
    1b30:	98 f0       	brcs	.+38     	; 0x1b58 <__lshrdi3+0x30>
    1b32:	08 50       	subi	r16, 0x08	; 8
    1b34:	23 2f       	mov	r18, r19
    1b36:	34 2f       	mov	r19, r20
    1b38:	45 2f       	mov	r20, r21
    1b3a:	56 2f       	mov	r21, r22
    1b3c:	67 2f       	mov	r22, r23
    1b3e:	78 2f       	mov	r23, r24
    1b40:	89 2f       	mov	r24, r25
    1b42:	90 2d       	mov	r25, r0
    1b44:	f4 cf       	rjmp	.-24     	; 0x1b2e <__lshrdi3+0x6>
    1b46:	05 94       	asr	r0
    1b48:	97 95       	ror	r25
    1b4a:	87 95       	ror	r24
    1b4c:	77 95       	ror	r23
    1b4e:	67 95       	ror	r22
    1b50:	57 95       	ror	r21
    1b52:	47 95       	ror	r20
    1b54:	37 95       	ror	r19
    1b56:	27 95       	ror	r18
    1b58:	0a 95       	dec	r16
    1b5a:	aa f7       	brpl	.-22     	; 0x1b46 <__lshrdi3+0x1e>
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <__adddi3>:
    1b60:	2a 0d       	add	r18, r10
    1b62:	3b 1d       	adc	r19, r11
    1b64:	4c 1d       	adc	r20, r12
    1b66:	5d 1d       	adc	r21, r13
    1b68:	6e 1d       	adc	r22, r14
    1b6a:	7f 1d       	adc	r23, r15
    1b6c:	80 1f       	adc	r24, r16
    1b6e:	91 1f       	adc	r25, r17
    1b70:	08 95       	ret

00001b72 <__subdi3>:
    1b72:	2a 19       	sub	r18, r10
    1b74:	3b 09       	sbc	r19, r11
    1b76:	4c 09       	sbc	r20, r12
    1b78:	5d 09       	sbc	r21, r13
    1b7a:	6e 09       	sbc	r22, r14
    1b7c:	7f 09       	sbc	r23, r15
    1b7e:	80 0b       	sbc	r24, r16
    1b80:	91 0b       	sbc	r25, r17
    1b82:	08 95       	ret

00001b84 <__cmpdi2_s8>:
    1b84:	00 24       	eor	r0, r0
    1b86:	a7 fd       	sbrc	r26, 7
    1b88:	00 94       	com	r0
    1b8a:	2a 17       	cp	r18, r26
    1b8c:	30 05       	cpc	r19, r0
    1b8e:	40 05       	cpc	r20, r0
    1b90:	50 05       	cpc	r21, r0
    1b92:	60 05       	cpc	r22, r0
    1b94:	70 05       	cpc	r23, r0
    1b96:	80 05       	cpc	r24, r0
    1b98:	90 05       	cpc	r25, r0
    1b9a:	08 95       	ret

00001b9c <__umulhisi3>:
    1b9c:	a2 9f       	mul	r26, r18
    1b9e:	b0 01       	movw	r22, r0
    1ba0:	b3 9f       	mul	r27, r19
    1ba2:	c0 01       	movw	r24, r0
    1ba4:	a3 9f       	mul	r26, r19
    1ba6:	70 0d       	add	r23, r0
    1ba8:	81 1d       	adc	r24, r1
    1baa:	11 24       	eor	r1, r1
    1bac:	91 1d       	adc	r25, r1
    1bae:	b2 9f       	mul	r27, r18
    1bb0:	70 0d       	add	r23, r0
    1bb2:	81 1d       	adc	r24, r1
    1bb4:	11 24       	eor	r1, r1
    1bb6:	91 1d       	adc	r25, r1
    1bb8:	08 95       	ret

00001bba <fdevopen>:
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	31 f4       	brne	.+12     	; 0x1bd2 <fdevopen+0x18>
    1bc6:	61 15       	cp	r22, r1
    1bc8:	71 05       	cpc	r23, r1
    1bca:	19 f4       	brne	.+6      	; 0x1bd2 <fdevopen+0x18>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	39 c0       	rjmp	.+114    	; 0x1c44 <fdevopen+0x8a>
    1bd2:	8b 01       	movw	r16, r22
    1bd4:	ec 01       	movw	r28, r24
    1bd6:	6e e0       	ldi	r22, 0x0E	; 14
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	76 d2       	rcall	.+1260   	; 0x20cc <calloc>
    1be0:	fc 01       	movw	r30, r24
    1be2:	89 2b       	or	r24, r25
    1be4:	99 f3       	breq	.-26     	; 0x1bcc <fdevopen+0x12>
    1be6:	80 e8       	ldi	r24, 0x80	; 128
    1be8:	83 83       	std	Z+3, r24	; 0x03
    1bea:	01 15       	cp	r16, r1
    1bec:	11 05       	cpc	r17, r1
    1bee:	71 f0       	breq	.+28     	; 0x1c0c <fdevopen+0x52>
    1bf0:	02 87       	std	Z+10, r16	; 0x0a
    1bf2:	13 87       	std	Z+11, r17	; 0x0b
    1bf4:	81 e8       	ldi	r24, 0x81	; 129
    1bf6:	83 83       	std	Z+3, r24	; 0x03
    1bf8:	80 91 87 30 	lds	r24, 0x3087	; 0x803087 <__iob>
    1bfc:	90 91 88 30 	lds	r25, 0x3088	; 0x803088 <__iob+0x1>
    1c00:	89 2b       	or	r24, r25
    1c02:	21 f4       	brne	.+8      	; 0x1c0c <fdevopen+0x52>
    1c04:	e0 93 87 30 	sts	0x3087, r30	; 0x803087 <__iob>
    1c08:	f0 93 88 30 	sts	0x3088, r31	; 0x803088 <__iob+0x1>
    1c0c:	20 97       	sbiw	r28, 0x00	; 0
    1c0e:	c9 f0       	breq	.+50     	; 0x1c42 <fdevopen+0x88>
    1c10:	c0 87       	std	Z+8, r28	; 0x08
    1c12:	d1 87       	std	Z+9, r29	; 0x09
    1c14:	83 81       	ldd	r24, Z+3	; 0x03
    1c16:	82 60       	ori	r24, 0x02	; 2
    1c18:	83 83       	std	Z+3, r24	; 0x03
    1c1a:	80 91 89 30 	lds	r24, 0x3089	; 0x803089 <__iob+0x2>
    1c1e:	90 91 8a 30 	lds	r25, 0x308A	; 0x80308a <__iob+0x3>
    1c22:	89 2b       	or	r24, r25
    1c24:	71 f4       	brne	.+28     	; 0x1c42 <fdevopen+0x88>
    1c26:	e0 93 89 30 	sts	0x3089, r30	; 0x803089 <__iob+0x2>
    1c2a:	f0 93 8a 30 	sts	0x308A, r31	; 0x80308a <__iob+0x3>
    1c2e:	80 91 8b 30 	lds	r24, 0x308B	; 0x80308b <__iob+0x4>
    1c32:	90 91 8c 30 	lds	r25, 0x308C	; 0x80308c <__iob+0x5>
    1c36:	89 2b       	or	r24, r25
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <fdevopen+0x88>
    1c3a:	e0 93 8b 30 	sts	0x308B, r30	; 0x80308b <__iob+0x4>
    1c3e:	f0 93 8c 30 	sts	0x308C, r31	; 0x80308c <__iob+0x5>
    1c42:	cf 01       	movw	r24, r30
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	08 95       	ret

00001c4e <printf>:
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	ae 01       	movw	r20, r28
    1c58:	4a 5f       	subi	r20, 0xFA	; 250
    1c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5c:	fa 01       	movw	r30, r20
    1c5e:	61 91       	ld	r22, Z+
    1c60:	71 91       	ld	r23, Z+
    1c62:	af 01       	movw	r20, r30
    1c64:	80 91 89 30 	lds	r24, 0x3089	; 0x803089 <__iob+0x2>
    1c68:	90 91 8a 30 	lds	r25, 0x308A	; 0x80308a <__iob+0x3>
    1c6c:	38 d0       	rcall	.+112    	; 0x1cde <vfprintf>
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <putchar>:
    1c74:	60 91 89 30 	lds	r22, 0x3089	; 0x803089 <__iob+0x2>
    1c78:	70 91 8a 30 	lds	r23, 0x308A	; 0x80308a <__iob+0x3>
    1c7c:	7f c3       	rjmp	.+1790   	; 0x237c <fputc>

00001c7e <puts>:
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	e0 91 89 30 	lds	r30, 0x3089	; 0x803089 <__iob+0x2>
    1c8a:	f0 91 8a 30 	lds	r31, 0x308A	; 0x80308a <__iob+0x3>
    1c8e:	23 81       	ldd	r18, Z+3	; 0x03
    1c90:	21 ff       	sbrs	r18, 1
    1c92:	1b c0       	rjmp	.+54     	; 0x1cca <puts+0x4c>
    1c94:	8c 01       	movw	r16, r24
    1c96:	d0 e0       	ldi	r29, 0x00	; 0
    1c98:	c0 e0       	ldi	r28, 0x00	; 0
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	81 91       	ld	r24, Z+
    1c9e:	8f 01       	movw	r16, r30
    1ca0:	60 91 89 30 	lds	r22, 0x3089	; 0x803089 <__iob+0x2>
    1ca4:	70 91 8a 30 	lds	r23, 0x308A	; 0x80308a <__iob+0x3>
    1ca8:	db 01       	movw	r26, r22
    1caa:	18 96       	adiw	r26, 0x08	; 8
    1cac:	ed 91       	ld	r30, X+
    1cae:	fc 91       	ld	r31, X
    1cb0:	19 97       	sbiw	r26, 0x09	; 9
    1cb2:	88 23       	and	r24, r24
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <puts+0x44>
    1cb6:	19 95       	eicall
    1cb8:	89 2b       	or	r24, r25
    1cba:	79 f3       	breq	.-34     	; 0x1c9a <puts+0x1c>
    1cbc:	df ef       	ldi	r29, 0xFF	; 255
    1cbe:	cf ef       	ldi	r28, 0xFF	; 255
    1cc0:	ec cf       	rjmp	.-40     	; 0x1c9a <puts+0x1c>
    1cc2:	8a e0       	ldi	r24, 0x0A	; 10
    1cc4:	19 95       	eicall
    1cc6:	89 2b       	or	r24, r25
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <puts+0x52>
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	9f ef       	ldi	r25, 0xFF	; 255
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <puts+0x56>
    1cd0:	8d 2f       	mov	r24, r29
    1cd2:	9c 2f       	mov	r25, r28
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <vfprintf>:
    1cde:	2f 92       	push	r2
    1ce0:	3f 92       	push	r3
    1ce2:	4f 92       	push	r4
    1ce4:	5f 92       	push	r5
    1ce6:	6f 92       	push	r6
    1ce8:	7f 92       	push	r7
    1cea:	8f 92       	push	r8
    1cec:	9f 92       	push	r9
    1cee:	af 92       	push	r10
    1cf0:	bf 92       	push	r11
    1cf2:	cf 92       	push	r12
    1cf4:	df 92       	push	r13
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	2b 97       	sbiw	r28, 0x0b	; 11
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	6c 01       	movw	r12, r24
    1d0e:	7b 01       	movw	r14, r22
    1d10:	8a 01       	movw	r16, r20
    1d12:	fc 01       	movw	r30, r24
    1d14:	16 82       	std	Z+6, r1	; 0x06
    1d16:	17 82       	std	Z+7, r1	; 0x07
    1d18:	83 81       	ldd	r24, Z+3	; 0x03
    1d1a:	81 ff       	sbrs	r24, 1
    1d1c:	bf c1       	rjmp	.+894    	; 0x209c <vfprintf+0x3be>
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	3c 01       	movw	r6, r24
    1d24:	f6 01       	movw	r30, r12
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	f7 01       	movw	r30, r14
    1d2a:	93 fd       	sbrc	r25, 3
    1d2c:	85 91       	lpm	r24, Z+
    1d2e:	93 ff       	sbrs	r25, 3
    1d30:	81 91       	ld	r24, Z+
    1d32:	7f 01       	movw	r14, r30
    1d34:	88 23       	and	r24, r24
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <vfprintf+0x5c>
    1d38:	ad c1       	rjmp	.+858    	; 0x2094 <vfprintf+0x3b6>
    1d3a:	85 32       	cpi	r24, 0x25	; 37
    1d3c:	39 f4       	brne	.+14     	; 0x1d4c <vfprintf+0x6e>
    1d3e:	93 fd       	sbrc	r25, 3
    1d40:	85 91       	lpm	r24, Z+
    1d42:	93 ff       	sbrs	r25, 3
    1d44:	81 91       	ld	r24, Z+
    1d46:	7f 01       	movw	r14, r30
    1d48:	85 32       	cpi	r24, 0x25	; 37
    1d4a:	21 f4       	brne	.+8      	; 0x1d54 <vfprintf+0x76>
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	15 d3       	rcall	.+1578   	; 0x237c <fputc>
    1d52:	e8 cf       	rjmp	.-48     	; 0x1d24 <vfprintf+0x46>
    1d54:	91 2c       	mov	r9, r1
    1d56:	21 2c       	mov	r2, r1
    1d58:	31 2c       	mov	r3, r1
    1d5a:	ff e1       	ldi	r31, 0x1F	; 31
    1d5c:	f3 15       	cp	r31, r3
    1d5e:	d8 f0       	brcs	.+54     	; 0x1d96 <vfprintf+0xb8>
    1d60:	8b 32       	cpi	r24, 0x2B	; 43
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <vfprintf+0xa4>
    1d64:	38 f4       	brcc	.+14     	; 0x1d74 <vfprintf+0x96>
    1d66:	80 32       	cpi	r24, 0x20	; 32
    1d68:	79 f0       	breq	.+30     	; 0x1d88 <vfprintf+0xaa>
    1d6a:	83 32       	cpi	r24, 0x23	; 35
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <vfprintf+0xb8>
    1d6e:	23 2d       	mov	r18, r3
    1d70:	20 61       	ori	r18, 0x10	; 16
    1d72:	1d c0       	rjmp	.+58     	; 0x1dae <vfprintf+0xd0>
    1d74:	8d 32       	cpi	r24, 0x2D	; 45
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <vfprintf+0xb2>
    1d78:	80 33       	cpi	r24, 0x30	; 48
    1d7a:	69 f4       	brne	.+26     	; 0x1d96 <vfprintf+0xb8>
    1d7c:	23 2d       	mov	r18, r3
    1d7e:	21 60       	ori	r18, 0x01	; 1
    1d80:	16 c0       	rjmp	.+44     	; 0x1dae <vfprintf+0xd0>
    1d82:	83 2d       	mov	r24, r3
    1d84:	82 60       	ori	r24, 0x02	; 2
    1d86:	38 2e       	mov	r3, r24
    1d88:	e3 2d       	mov	r30, r3
    1d8a:	e4 60       	ori	r30, 0x04	; 4
    1d8c:	3e 2e       	mov	r3, r30
    1d8e:	2a c0       	rjmp	.+84     	; 0x1de4 <vfprintf+0x106>
    1d90:	f3 2d       	mov	r31, r3
    1d92:	f8 60       	ori	r31, 0x08	; 8
    1d94:	1d c0       	rjmp	.+58     	; 0x1dd0 <vfprintf+0xf2>
    1d96:	37 fc       	sbrc	r3, 7
    1d98:	2d c0       	rjmp	.+90     	; 0x1df4 <vfprintf+0x116>
    1d9a:	20 ed       	ldi	r18, 0xD0	; 208
    1d9c:	28 0f       	add	r18, r24
    1d9e:	2a 30       	cpi	r18, 0x0A	; 10
    1da0:	40 f0       	brcs	.+16     	; 0x1db2 <vfprintf+0xd4>
    1da2:	8e 32       	cpi	r24, 0x2E	; 46
    1da4:	b9 f4       	brne	.+46     	; 0x1dd4 <vfprintf+0xf6>
    1da6:	36 fc       	sbrc	r3, 6
    1da8:	75 c1       	rjmp	.+746    	; 0x2094 <vfprintf+0x3b6>
    1daa:	23 2d       	mov	r18, r3
    1dac:	20 64       	ori	r18, 0x40	; 64
    1dae:	32 2e       	mov	r3, r18
    1db0:	19 c0       	rjmp	.+50     	; 0x1de4 <vfprintf+0x106>
    1db2:	36 fe       	sbrs	r3, 6
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <vfprintf+0xe4>
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	98 9e       	mul	r9, r24
    1dba:	20 0d       	add	r18, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	92 2e       	mov	r9, r18
    1dc0:	11 c0       	rjmp	.+34     	; 0x1de4 <vfprintf+0x106>
    1dc2:	ea e0       	ldi	r30, 0x0A	; 10
    1dc4:	2e 9e       	mul	r2, r30
    1dc6:	20 0d       	add	r18, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	22 2e       	mov	r2, r18
    1dcc:	f3 2d       	mov	r31, r3
    1dce:	f0 62       	ori	r31, 0x20	; 32
    1dd0:	3f 2e       	mov	r3, r31
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <vfprintf+0x106>
    1dd4:	8c 36       	cpi	r24, 0x6C	; 108
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <vfprintf+0x102>
    1dd8:	83 2d       	mov	r24, r3
    1dda:	80 68       	ori	r24, 0x80	; 128
    1ddc:	38 2e       	mov	r3, r24
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <vfprintf+0x106>
    1de0:	88 36       	cpi	r24, 0x68	; 104
    1de2:	41 f4       	brne	.+16     	; 0x1df4 <vfprintf+0x116>
    1de4:	f7 01       	movw	r30, r14
    1de6:	93 fd       	sbrc	r25, 3
    1de8:	85 91       	lpm	r24, Z+
    1dea:	93 ff       	sbrs	r25, 3
    1dec:	81 91       	ld	r24, Z+
    1dee:	7f 01       	movw	r14, r30
    1df0:	81 11       	cpse	r24, r1
    1df2:	b3 cf       	rjmp	.-154    	; 0x1d5a <vfprintf+0x7c>
    1df4:	98 2f       	mov	r25, r24
    1df6:	9f 7d       	andi	r25, 0xDF	; 223
    1df8:	95 54       	subi	r25, 0x45	; 69
    1dfa:	93 30       	cpi	r25, 0x03	; 3
    1dfc:	28 f4       	brcc	.+10     	; 0x1e08 <vfprintf+0x12a>
    1dfe:	0c 5f       	subi	r16, 0xFC	; 252
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	9f e3       	ldi	r25, 0x3F	; 63
    1e04:	99 83       	std	Y+1, r25	; 0x01
    1e06:	0d c0       	rjmp	.+26     	; 0x1e22 <vfprintf+0x144>
    1e08:	83 36       	cpi	r24, 0x63	; 99
    1e0a:	31 f0       	breq	.+12     	; 0x1e18 <vfprintf+0x13a>
    1e0c:	83 37       	cpi	r24, 0x73	; 115
    1e0e:	71 f0       	breq	.+28     	; 0x1e2c <vfprintf+0x14e>
    1e10:	83 35       	cpi	r24, 0x53	; 83
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <vfprintf+0x138>
    1e14:	55 c0       	rjmp	.+170    	; 0x1ec0 <vfprintf+0x1e2>
    1e16:	20 c0       	rjmp	.+64     	; 0x1e58 <vfprintf+0x17a>
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 81       	ld	r24, Z
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	0e 5f       	subi	r16, 0xFE	; 254
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	88 24       	eor	r8, r8
    1e24:	83 94       	inc	r8
    1e26:	91 2c       	mov	r9, r1
    1e28:	53 01       	movw	r10, r6
    1e2a:	12 c0       	rjmp	.+36     	; 0x1e50 <vfprintf+0x172>
    1e2c:	28 01       	movw	r4, r16
    1e2e:	f2 e0       	ldi	r31, 0x02	; 2
    1e30:	4f 0e       	add	r4, r31
    1e32:	51 1c       	adc	r5, r1
    1e34:	f8 01       	movw	r30, r16
    1e36:	a0 80       	ld	r10, Z
    1e38:	b1 80       	ldd	r11, Z+1	; 0x01
    1e3a:	36 fe       	sbrs	r3, 6
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <vfprintf+0x166>
    1e3e:	69 2d       	mov	r22, r9
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <vfprintf+0x16a>
    1e44:	6f ef       	ldi	r22, 0xFF	; 255
    1e46:	7f ef       	ldi	r23, 0xFF	; 255
    1e48:	c5 01       	movw	r24, r10
    1e4a:	8d d2       	rcall	.+1306   	; 0x2366 <strnlen>
    1e4c:	4c 01       	movw	r8, r24
    1e4e:	82 01       	movw	r16, r4
    1e50:	f3 2d       	mov	r31, r3
    1e52:	ff 77       	andi	r31, 0x7F	; 127
    1e54:	3f 2e       	mov	r3, r31
    1e56:	15 c0       	rjmp	.+42     	; 0x1e82 <vfprintf+0x1a4>
    1e58:	28 01       	movw	r4, r16
    1e5a:	22 e0       	ldi	r18, 0x02	; 2
    1e5c:	42 0e       	add	r4, r18
    1e5e:	51 1c       	adc	r5, r1
    1e60:	f8 01       	movw	r30, r16
    1e62:	a0 80       	ld	r10, Z
    1e64:	b1 80       	ldd	r11, Z+1	; 0x01
    1e66:	36 fe       	sbrs	r3, 6
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <vfprintf+0x192>
    1e6a:	69 2d       	mov	r22, r9
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <vfprintf+0x196>
    1e70:	6f ef       	ldi	r22, 0xFF	; 255
    1e72:	7f ef       	ldi	r23, 0xFF	; 255
    1e74:	c5 01       	movw	r24, r10
    1e76:	65 d2       	rcall	.+1226   	; 0x2342 <strnlen_P>
    1e78:	4c 01       	movw	r8, r24
    1e7a:	f3 2d       	mov	r31, r3
    1e7c:	f0 68       	ori	r31, 0x80	; 128
    1e7e:	3f 2e       	mov	r3, r31
    1e80:	82 01       	movw	r16, r4
    1e82:	33 fc       	sbrc	r3, 3
    1e84:	19 c0       	rjmp	.+50     	; 0x1eb8 <vfprintf+0x1da>
    1e86:	82 2d       	mov	r24, r2
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	88 16       	cp	r8, r24
    1e8c:	99 06       	cpc	r9, r25
    1e8e:	a0 f4       	brcc	.+40     	; 0x1eb8 <vfprintf+0x1da>
    1e90:	b6 01       	movw	r22, r12
    1e92:	80 e2       	ldi	r24, 0x20	; 32
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	72 d2       	rcall	.+1252   	; 0x237c <fputc>
    1e98:	2a 94       	dec	r2
    1e9a:	f5 cf       	rjmp	.-22     	; 0x1e86 <vfprintf+0x1a8>
    1e9c:	f5 01       	movw	r30, r10
    1e9e:	37 fc       	sbrc	r3, 7
    1ea0:	85 91       	lpm	r24, Z+
    1ea2:	37 fe       	sbrs	r3, 7
    1ea4:	81 91       	ld	r24, Z+
    1ea6:	5f 01       	movw	r10, r30
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	67 d2       	rcall	.+1230   	; 0x237c <fputc>
    1eae:	21 10       	cpse	r2, r1
    1eb0:	2a 94       	dec	r2
    1eb2:	21 e0       	ldi	r18, 0x01	; 1
    1eb4:	82 1a       	sub	r8, r18
    1eb6:	91 08       	sbc	r9, r1
    1eb8:	81 14       	cp	r8, r1
    1eba:	91 04       	cpc	r9, r1
    1ebc:	79 f7       	brne	.-34     	; 0x1e9c <vfprintf+0x1be>
    1ebe:	e1 c0       	rjmp	.+450    	; 0x2082 <vfprintf+0x3a4>
    1ec0:	84 36       	cpi	r24, 0x64	; 100
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <vfprintf+0x1ea>
    1ec4:	89 36       	cpi	r24, 0x69	; 105
    1ec6:	39 f5       	brne	.+78     	; 0x1f16 <vfprintf+0x238>
    1ec8:	f8 01       	movw	r30, r16
    1eca:	37 fe       	sbrs	r3, 7
    1ecc:	07 c0       	rjmp	.+14     	; 0x1edc <vfprintf+0x1fe>
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	0c 5f       	subi	r16, 0xFC	; 252
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	08 c0       	rjmp	.+16     	; 0x1eec <vfprintf+0x20e>
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	07 2e       	mov	r0, r23
    1ee2:	00 0c       	add	r0, r0
    1ee4:	88 0b       	sbc	r24, r24
    1ee6:	99 0b       	sbc	r25, r25
    1ee8:	0e 5f       	subi	r16, 0xFE	; 254
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	f3 2d       	mov	r31, r3
    1eee:	ff 76       	andi	r31, 0x6F	; 111
    1ef0:	3f 2e       	mov	r3, r31
    1ef2:	97 ff       	sbrs	r25, 7
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <vfprintf+0x22a>
    1ef6:	90 95       	com	r25
    1ef8:	80 95       	com	r24
    1efa:	70 95       	com	r23
    1efc:	61 95       	neg	r22
    1efe:	7f 4f       	sbci	r23, 0xFF	; 255
    1f00:	8f 4f       	sbci	r24, 0xFF	; 255
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	f0 68       	ori	r31, 0x80	; 128
    1f06:	3f 2e       	mov	r3, r31
    1f08:	2a e0       	ldi	r18, 0x0A	; 10
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	a3 01       	movw	r20, r6
    1f0e:	72 d2       	rcall	.+1252   	; 0x23f4 <__ultoa_invert>
    1f10:	88 2e       	mov	r8, r24
    1f12:	86 18       	sub	r8, r6
    1f14:	44 c0       	rjmp	.+136    	; 0x1f9e <vfprintf+0x2c0>
    1f16:	85 37       	cpi	r24, 0x75	; 117
    1f18:	31 f4       	brne	.+12     	; 0x1f26 <vfprintf+0x248>
    1f1a:	23 2d       	mov	r18, r3
    1f1c:	2f 7e       	andi	r18, 0xEF	; 239
    1f1e:	b2 2e       	mov	r11, r18
    1f20:	2a e0       	ldi	r18, 0x0A	; 10
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	25 c0       	rjmp	.+74     	; 0x1f70 <vfprintf+0x292>
    1f26:	93 2d       	mov	r25, r3
    1f28:	99 7f       	andi	r25, 0xF9	; 249
    1f2a:	b9 2e       	mov	r11, r25
    1f2c:	8f 36       	cpi	r24, 0x6F	; 111
    1f2e:	c1 f0       	breq	.+48     	; 0x1f60 <vfprintf+0x282>
    1f30:	18 f4       	brcc	.+6      	; 0x1f38 <vfprintf+0x25a>
    1f32:	88 35       	cpi	r24, 0x58	; 88
    1f34:	79 f0       	breq	.+30     	; 0x1f54 <vfprintf+0x276>
    1f36:	ae c0       	rjmp	.+348    	; 0x2094 <vfprintf+0x3b6>
    1f38:	80 37       	cpi	r24, 0x70	; 112
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <vfprintf+0x264>
    1f3c:	88 37       	cpi	r24, 0x78	; 120
    1f3e:	21 f0       	breq	.+8      	; 0x1f48 <vfprintf+0x26a>
    1f40:	a9 c0       	rjmp	.+338    	; 0x2094 <vfprintf+0x3b6>
    1f42:	e9 2f       	mov	r30, r25
    1f44:	e0 61       	ori	r30, 0x10	; 16
    1f46:	be 2e       	mov	r11, r30
    1f48:	b4 fe       	sbrs	r11, 4
    1f4a:	0d c0       	rjmp	.+26     	; 0x1f66 <vfprintf+0x288>
    1f4c:	fb 2d       	mov	r31, r11
    1f4e:	f4 60       	ori	r31, 0x04	; 4
    1f50:	bf 2e       	mov	r11, r31
    1f52:	09 c0       	rjmp	.+18     	; 0x1f66 <vfprintf+0x288>
    1f54:	34 fe       	sbrs	r3, 4
    1f56:	0a c0       	rjmp	.+20     	; 0x1f6c <vfprintf+0x28e>
    1f58:	29 2f       	mov	r18, r25
    1f5a:	26 60       	ori	r18, 0x06	; 6
    1f5c:	b2 2e       	mov	r11, r18
    1f5e:	06 c0       	rjmp	.+12     	; 0x1f6c <vfprintf+0x28e>
    1f60:	28 e0       	ldi	r18, 0x08	; 8
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <vfprintf+0x292>
    1f66:	20 e1       	ldi	r18, 0x10	; 16
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <vfprintf+0x292>
    1f6c:	20 e1       	ldi	r18, 0x10	; 16
    1f6e:	32 e0       	ldi	r19, 0x02	; 2
    1f70:	f8 01       	movw	r30, r16
    1f72:	b7 fe       	sbrs	r11, 7
    1f74:	07 c0       	rjmp	.+14     	; 0x1f84 <vfprintf+0x2a6>
    1f76:	60 81       	ld	r22, Z
    1f78:	71 81       	ldd	r23, Z+1	; 0x01
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	0c 5f       	subi	r16, 0xFC	; 252
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	06 c0       	rjmp	.+12     	; 0x1f90 <vfprintf+0x2b2>
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 5f       	subi	r16, 0xFE	; 254
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	a3 01       	movw	r20, r6
    1f92:	30 d2       	rcall	.+1120   	; 0x23f4 <__ultoa_invert>
    1f94:	88 2e       	mov	r8, r24
    1f96:	86 18       	sub	r8, r6
    1f98:	fb 2d       	mov	r31, r11
    1f9a:	ff 77       	andi	r31, 0x7F	; 127
    1f9c:	3f 2e       	mov	r3, r31
    1f9e:	36 fe       	sbrs	r3, 6
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <vfprintf+0x2de>
    1fa2:	23 2d       	mov	r18, r3
    1fa4:	2e 7f       	andi	r18, 0xFE	; 254
    1fa6:	a2 2e       	mov	r10, r18
    1fa8:	89 14       	cp	r8, r9
    1faa:	58 f4       	brcc	.+22     	; 0x1fc2 <vfprintf+0x2e4>
    1fac:	34 fe       	sbrs	r3, 4
    1fae:	0b c0       	rjmp	.+22     	; 0x1fc6 <vfprintf+0x2e8>
    1fb0:	32 fc       	sbrc	r3, 2
    1fb2:	09 c0       	rjmp	.+18     	; 0x1fc6 <vfprintf+0x2e8>
    1fb4:	83 2d       	mov	r24, r3
    1fb6:	8e 7e       	andi	r24, 0xEE	; 238
    1fb8:	a8 2e       	mov	r10, r24
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <vfprintf+0x2e8>
    1fbc:	b8 2c       	mov	r11, r8
    1fbe:	a3 2c       	mov	r10, r3
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <vfprintf+0x2ea>
    1fc2:	b8 2c       	mov	r11, r8
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <vfprintf+0x2ea>
    1fc6:	b9 2c       	mov	r11, r9
    1fc8:	a4 fe       	sbrs	r10, 4
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <vfprintf+0x30c>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e8 0d       	add	r30, r8
    1fd0:	f1 1d       	adc	r31, r1
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 33       	cpi	r24, 0x30	; 48
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <vfprintf+0x302>
    1fd8:	9a 2d       	mov	r25, r10
    1fda:	99 7e       	andi	r25, 0xE9	; 233
    1fdc:	a9 2e       	mov	r10, r25
    1fde:	09 c0       	rjmp	.+18     	; 0x1ff2 <vfprintf+0x314>
    1fe0:	a2 fe       	sbrs	r10, 2
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <vfprintf+0x312>
    1fe4:	b3 94       	inc	r11
    1fe6:	b3 94       	inc	r11
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <vfprintf+0x314>
    1fea:	8a 2d       	mov	r24, r10
    1fec:	86 78       	andi	r24, 0x86	; 134
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <vfprintf+0x314>
    1ff0:	b3 94       	inc	r11
    1ff2:	a3 fc       	sbrc	r10, 3
    1ff4:	10 c0       	rjmp	.+32     	; 0x2016 <vfprintf+0x338>
    1ff6:	a0 fe       	sbrs	r10, 0
    1ff8:	06 c0       	rjmp	.+12     	; 0x2006 <vfprintf+0x328>
    1ffa:	b2 14       	cp	r11, r2
    1ffc:	80 f4       	brcc	.+32     	; 0x201e <vfprintf+0x340>
    1ffe:	28 0c       	add	r2, r8
    2000:	92 2c       	mov	r9, r2
    2002:	9b 18       	sub	r9, r11
    2004:	0d c0       	rjmp	.+26     	; 0x2020 <vfprintf+0x342>
    2006:	b2 14       	cp	r11, r2
    2008:	58 f4       	brcc	.+22     	; 0x2020 <vfprintf+0x342>
    200a:	b6 01       	movw	r22, r12
    200c:	80 e2       	ldi	r24, 0x20	; 32
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	b5 d1       	rcall	.+874    	; 0x237c <fputc>
    2012:	b3 94       	inc	r11
    2014:	f8 cf       	rjmp	.-16     	; 0x2006 <vfprintf+0x328>
    2016:	b2 14       	cp	r11, r2
    2018:	18 f4       	brcc	.+6      	; 0x2020 <vfprintf+0x342>
    201a:	2b 18       	sub	r2, r11
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <vfprintf+0x344>
    201e:	98 2c       	mov	r9, r8
    2020:	21 2c       	mov	r2, r1
    2022:	a4 fe       	sbrs	r10, 4
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <vfprintf+0x366>
    2026:	b6 01       	movw	r22, r12
    2028:	80 e3       	ldi	r24, 0x30	; 48
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a7 d1       	rcall	.+846    	; 0x237c <fputc>
    202e:	a2 fe       	sbrs	r10, 2
    2030:	16 c0       	rjmp	.+44     	; 0x205e <vfprintf+0x380>
    2032:	a1 fc       	sbrc	r10, 1
    2034:	03 c0       	rjmp	.+6      	; 0x203c <vfprintf+0x35e>
    2036:	88 e7       	ldi	r24, 0x78	; 120
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <vfprintf+0x362>
    203c:	88 e5       	ldi	r24, 0x58	; 88
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	b6 01       	movw	r22, r12
    2042:	0c c0       	rjmp	.+24     	; 0x205c <vfprintf+0x37e>
    2044:	8a 2d       	mov	r24, r10
    2046:	86 78       	andi	r24, 0x86	; 134
    2048:	51 f0       	breq	.+20     	; 0x205e <vfprintf+0x380>
    204a:	a1 fe       	sbrs	r10, 1
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <vfprintf+0x374>
    204e:	8b e2       	ldi	r24, 0x2B	; 43
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <vfprintf+0x376>
    2052:	80 e2       	ldi	r24, 0x20	; 32
    2054:	a7 fc       	sbrc	r10, 7
    2056:	8d e2       	ldi	r24, 0x2D	; 45
    2058:	b6 01       	movw	r22, r12
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	8f d1       	rcall	.+798    	; 0x237c <fputc>
    205e:	89 14       	cp	r8, r9
    2060:	30 f4       	brcc	.+12     	; 0x206e <vfprintf+0x390>
    2062:	b6 01       	movw	r22, r12
    2064:	80 e3       	ldi	r24, 0x30	; 48
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	89 d1       	rcall	.+786    	; 0x237c <fputc>
    206a:	9a 94       	dec	r9
    206c:	f8 cf       	rjmp	.-16     	; 0x205e <vfprintf+0x380>
    206e:	8a 94       	dec	r8
    2070:	f3 01       	movw	r30, r6
    2072:	e8 0d       	add	r30, r8
    2074:	f1 1d       	adc	r31, r1
    2076:	80 81       	ld	r24, Z
    2078:	b6 01       	movw	r22, r12
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	7f d1       	rcall	.+766    	; 0x237c <fputc>
    207e:	81 10       	cpse	r8, r1
    2080:	f6 cf       	rjmp	.-20     	; 0x206e <vfprintf+0x390>
    2082:	22 20       	and	r2, r2
    2084:	09 f4       	brne	.+2      	; 0x2088 <vfprintf+0x3aa>
    2086:	4e ce       	rjmp	.-868    	; 0x1d24 <vfprintf+0x46>
    2088:	b6 01       	movw	r22, r12
    208a:	80 e2       	ldi	r24, 0x20	; 32
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	76 d1       	rcall	.+748    	; 0x237c <fputc>
    2090:	2a 94       	dec	r2
    2092:	f7 cf       	rjmp	.-18     	; 0x2082 <vfprintf+0x3a4>
    2094:	f6 01       	movw	r30, r12
    2096:	86 81       	ldd	r24, Z+6	; 0x06
    2098:	97 81       	ldd	r25, Z+7	; 0x07
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <vfprintf+0x3c2>
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	9f ef       	ldi	r25, 0xFF	; 255
    20a0:	2b 96       	adiw	r28, 0x0b	; 11
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	bf 90       	pop	r11
    20b8:	af 90       	pop	r10
    20ba:	9f 90       	pop	r9
    20bc:	8f 90       	pop	r8
    20be:	7f 90       	pop	r7
    20c0:	6f 90       	pop	r6
    20c2:	5f 90       	pop	r5
    20c4:	4f 90       	pop	r4
    20c6:	3f 90       	pop	r3
    20c8:	2f 90       	pop	r2
    20ca:	08 95       	ret

000020cc <calloc>:
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	86 9f       	mul	r24, r22
    20d6:	80 01       	movw	r16, r0
    20d8:	87 9f       	mul	r24, r23
    20da:	10 0d       	add	r17, r0
    20dc:	96 9f       	mul	r25, r22
    20de:	10 0d       	add	r17, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	c8 01       	movw	r24, r16
    20e4:	0d d0       	rcall	.+26     	; 0x2100 <malloc>
    20e6:	ec 01       	movw	r28, r24
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	21 f0       	breq	.+8      	; 0x20f4 <calloc+0x28>
    20ec:	a8 01       	movw	r20, r16
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	32 d1       	rcall	.+612    	; 0x2358 <memset>
    20f4:	ce 01       	movw	r24, r28
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	08 95       	ret

00002100 <malloc>:
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	91 05       	cpc	r25, r1
    210c:	10 f4       	brcc	.+4      	; 0x2112 <malloc+0x12>
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	e0 91 8f 30 	lds	r30, 0x308F	; 0x80308f <__flp>
    2116:	f0 91 90 30 	lds	r31, 0x3090	; 0x803090 <__flp+0x1>
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	a0 e0       	ldi	r26, 0x00	; 0
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	30 97       	sbiw	r30, 0x00	; 0
    2124:	19 f1       	breq	.+70     	; 0x216c <malloc+0x6c>
    2126:	40 81       	ld	r20, Z
    2128:	51 81       	ldd	r21, Z+1	; 0x01
    212a:	02 81       	ldd	r16, Z+2	; 0x02
    212c:	13 81       	ldd	r17, Z+3	; 0x03
    212e:	48 17       	cp	r20, r24
    2130:	59 07       	cpc	r21, r25
    2132:	c8 f0       	brcs	.+50     	; 0x2166 <malloc+0x66>
    2134:	84 17       	cp	r24, r20
    2136:	95 07       	cpc	r25, r21
    2138:	69 f4       	brne	.+26     	; 0x2154 <malloc+0x54>
    213a:	10 97       	sbiw	r26, 0x00	; 0
    213c:	31 f0       	breq	.+12     	; 0x214a <malloc+0x4a>
    213e:	12 96       	adiw	r26, 0x02	; 2
    2140:	0c 93       	st	X, r16
    2142:	12 97       	sbiw	r26, 0x02	; 2
    2144:	13 96       	adiw	r26, 0x03	; 3
    2146:	1c 93       	st	X, r17
    2148:	27 c0       	rjmp	.+78     	; 0x2198 <malloc+0x98>
    214a:	00 93 8f 30 	sts	0x308F, r16	; 0x80308f <__flp>
    214e:	10 93 90 30 	sts	0x3090, r17	; 0x803090 <__flp+0x1>
    2152:	22 c0       	rjmp	.+68     	; 0x2198 <malloc+0x98>
    2154:	21 15       	cp	r18, r1
    2156:	31 05       	cpc	r19, r1
    2158:	19 f0       	breq	.+6      	; 0x2160 <malloc+0x60>
    215a:	42 17       	cp	r20, r18
    215c:	53 07       	cpc	r21, r19
    215e:	18 f4       	brcc	.+6      	; 0x2166 <malloc+0x66>
    2160:	9a 01       	movw	r18, r20
    2162:	bd 01       	movw	r22, r26
    2164:	ef 01       	movw	r28, r30
    2166:	df 01       	movw	r26, r30
    2168:	f8 01       	movw	r30, r16
    216a:	db cf       	rjmp	.-74     	; 0x2122 <malloc+0x22>
    216c:	21 15       	cp	r18, r1
    216e:	31 05       	cpc	r19, r1
    2170:	f9 f0       	breq	.+62     	; 0x21b0 <malloc+0xb0>
    2172:	28 1b       	sub	r18, r24
    2174:	39 0b       	sbc	r19, r25
    2176:	24 30       	cpi	r18, 0x04	; 4
    2178:	31 05       	cpc	r19, r1
    217a:	80 f4       	brcc	.+32     	; 0x219c <malloc+0x9c>
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	61 15       	cp	r22, r1
    2182:	71 05       	cpc	r23, r1
    2184:	21 f0       	breq	.+8      	; 0x218e <malloc+0x8e>
    2186:	fb 01       	movw	r30, r22
    2188:	82 83       	std	Z+2, r24	; 0x02
    218a:	93 83       	std	Z+3, r25	; 0x03
    218c:	04 c0       	rjmp	.+8      	; 0x2196 <malloc+0x96>
    218e:	80 93 8f 30 	sts	0x308F, r24	; 0x80308f <__flp>
    2192:	90 93 90 30 	sts	0x3090, r25	; 0x803090 <__flp+0x1>
    2196:	fe 01       	movw	r30, r28
    2198:	32 96       	adiw	r30, 0x02	; 2
    219a:	44 c0       	rjmp	.+136    	; 0x2224 <malloc+0x124>
    219c:	fe 01       	movw	r30, r28
    219e:	e2 0f       	add	r30, r18
    21a0:	f3 1f       	adc	r31, r19
    21a2:	81 93       	st	Z+, r24
    21a4:	91 93       	st	Z+, r25
    21a6:	22 50       	subi	r18, 0x02	; 2
    21a8:	31 09       	sbc	r19, r1
    21aa:	28 83       	st	Y, r18
    21ac:	39 83       	std	Y+1, r19	; 0x01
    21ae:	3a c0       	rjmp	.+116    	; 0x2224 <malloc+0x124>
    21b0:	20 91 8d 30 	lds	r18, 0x308D	; 0x80308d <__brkval>
    21b4:	30 91 8e 30 	lds	r19, 0x308E	; 0x80308e <__brkval+0x1>
    21b8:	23 2b       	or	r18, r19
    21ba:	41 f4       	brne	.+16     	; 0x21cc <malloc+0xcc>
    21bc:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    21c0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    21c4:	20 93 8d 30 	sts	0x308D, r18	; 0x80308d <__brkval>
    21c8:	30 93 8e 30 	sts	0x308E, r19	; 0x80308e <__brkval+0x1>
    21cc:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    21d0:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    21d4:	21 15       	cp	r18, r1
    21d6:	31 05       	cpc	r19, r1
    21d8:	41 f4       	brne	.+16     	; 0x21ea <malloc+0xea>
    21da:	2d b7       	in	r18, 0x3d	; 61
    21dc:	3e b7       	in	r19, 0x3e	; 62
    21de:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    21e2:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    21e6:	24 1b       	sub	r18, r20
    21e8:	35 0b       	sbc	r19, r21
    21ea:	e0 91 8d 30 	lds	r30, 0x308D	; 0x80308d <__brkval>
    21ee:	f0 91 8e 30 	lds	r31, 0x308E	; 0x80308e <__brkval+0x1>
    21f2:	e2 17       	cp	r30, r18
    21f4:	f3 07       	cpc	r31, r19
    21f6:	a0 f4       	brcc	.+40     	; 0x2220 <malloc+0x120>
    21f8:	2e 1b       	sub	r18, r30
    21fa:	3f 0b       	sbc	r19, r31
    21fc:	28 17       	cp	r18, r24
    21fe:	39 07       	cpc	r19, r25
    2200:	78 f0       	brcs	.+30     	; 0x2220 <malloc+0x120>
    2202:	ac 01       	movw	r20, r24
    2204:	4e 5f       	subi	r20, 0xFE	; 254
    2206:	5f 4f       	sbci	r21, 0xFF	; 255
    2208:	24 17       	cp	r18, r20
    220a:	35 07       	cpc	r19, r21
    220c:	48 f0       	brcs	.+18     	; 0x2220 <malloc+0x120>
    220e:	4e 0f       	add	r20, r30
    2210:	5f 1f       	adc	r21, r31
    2212:	40 93 8d 30 	sts	0x308D, r20	; 0x80308d <__brkval>
    2216:	50 93 8e 30 	sts	0x308E, r21	; 0x80308e <__brkval+0x1>
    221a:	81 93       	st	Z+, r24
    221c:	91 93       	st	Z+, r25
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <malloc+0x124>
    2220:	e0 e0       	ldi	r30, 0x00	; 0
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	cf 01       	movw	r24, r30
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	08 95       	ret

00002230 <free>:
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	09 f4       	brne	.+2      	; 0x223a <free+0xa>
    2238:	81 c0       	rjmp	.+258    	; 0x233c <free+0x10c>
    223a:	fc 01       	movw	r30, r24
    223c:	32 97       	sbiw	r30, 0x02	; 2
    223e:	12 82       	std	Z+2, r1	; 0x02
    2240:	13 82       	std	Z+3, r1	; 0x03
    2242:	a0 91 8f 30 	lds	r26, 0x308F	; 0x80308f <__flp>
    2246:	b0 91 90 30 	lds	r27, 0x3090	; 0x803090 <__flp+0x1>
    224a:	10 97       	sbiw	r26, 0x00	; 0
    224c:	81 f4       	brne	.+32     	; 0x226e <free+0x3e>
    224e:	20 81       	ld	r18, Z
    2250:	31 81       	ldd	r19, Z+1	; 0x01
    2252:	82 0f       	add	r24, r18
    2254:	93 1f       	adc	r25, r19
    2256:	20 91 8d 30 	lds	r18, 0x308D	; 0x80308d <__brkval>
    225a:	30 91 8e 30 	lds	r19, 0x308E	; 0x80308e <__brkval+0x1>
    225e:	28 17       	cp	r18, r24
    2260:	39 07       	cpc	r19, r25
    2262:	51 f5       	brne	.+84     	; 0x22b8 <free+0x88>
    2264:	e0 93 8d 30 	sts	0x308D, r30	; 0x80308d <__brkval>
    2268:	f0 93 8e 30 	sts	0x308E, r31	; 0x80308e <__brkval+0x1>
    226c:	67 c0       	rjmp	.+206    	; 0x233c <free+0x10c>
    226e:	ed 01       	movw	r28, r26
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	ce 17       	cp	r28, r30
    2276:	df 07       	cpc	r29, r31
    2278:	40 f4       	brcc	.+16     	; 0x228a <free+0x5a>
    227a:	4a 81       	ldd	r20, Y+2	; 0x02
    227c:	5b 81       	ldd	r21, Y+3	; 0x03
    227e:	9e 01       	movw	r18, r28
    2280:	41 15       	cp	r20, r1
    2282:	51 05       	cpc	r21, r1
    2284:	f1 f0       	breq	.+60     	; 0x22c2 <free+0x92>
    2286:	ea 01       	movw	r28, r20
    2288:	f5 cf       	rjmp	.-22     	; 0x2274 <free+0x44>
    228a:	c2 83       	std	Z+2, r28	; 0x02
    228c:	d3 83       	std	Z+3, r29	; 0x03
    228e:	40 81       	ld	r20, Z
    2290:	51 81       	ldd	r21, Z+1	; 0x01
    2292:	84 0f       	add	r24, r20
    2294:	95 1f       	adc	r25, r21
    2296:	c8 17       	cp	r28, r24
    2298:	d9 07       	cpc	r29, r25
    229a:	59 f4       	brne	.+22     	; 0x22b2 <free+0x82>
    229c:	88 81       	ld	r24, Y
    229e:	99 81       	ldd	r25, Y+1	; 0x01
    22a0:	84 0f       	add	r24, r20
    22a2:	95 1f       	adc	r25, r21
    22a4:	02 96       	adiw	r24, 0x02	; 2
    22a6:	80 83       	st	Z, r24
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	82 83       	std	Z+2, r24	; 0x02
    22b0:	93 83       	std	Z+3, r25	; 0x03
    22b2:	21 15       	cp	r18, r1
    22b4:	31 05       	cpc	r19, r1
    22b6:	29 f4       	brne	.+10     	; 0x22c2 <free+0x92>
    22b8:	e0 93 8f 30 	sts	0x308F, r30	; 0x80308f <__flp>
    22bc:	f0 93 90 30 	sts	0x3090, r31	; 0x803090 <__flp+0x1>
    22c0:	3d c0       	rjmp	.+122    	; 0x233c <free+0x10c>
    22c2:	e9 01       	movw	r28, r18
    22c4:	ea 83       	std	Y+2, r30	; 0x02
    22c6:	fb 83       	std	Y+3, r31	; 0x03
    22c8:	49 91       	ld	r20, Y+
    22ca:	59 91       	ld	r21, Y+
    22cc:	c4 0f       	add	r28, r20
    22ce:	d5 1f       	adc	r29, r21
    22d0:	ec 17       	cp	r30, r28
    22d2:	fd 07       	cpc	r31, r29
    22d4:	61 f4       	brne	.+24     	; 0x22ee <free+0xbe>
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	84 0f       	add	r24, r20
    22dc:	95 1f       	adc	r25, r21
    22de:	02 96       	adiw	r24, 0x02	; 2
    22e0:	e9 01       	movw	r28, r18
    22e2:	88 83       	st	Y, r24
    22e4:	99 83       	std	Y+1, r25	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	8a 83       	std	Y+2, r24	; 0x02
    22ec:	9b 83       	std	Y+3, r25	; 0x03
    22ee:	e0 e0       	ldi	r30, 0x00	; 0
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	12 96       	adiw	r26, 0x02	; 2
    22f4:	8d 91       	ld	r24, X+
    22f6:	9c 91       	ld	r25, X
    22f8:	13 97       	sbiw	r26, 0x03	; 3
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	19 f0       	breq	.+6      	; 0x2304 <free+0xd4>
    22fe:	fd 01       	movw	r30, r26
    2300:	dc 01       	movw	r26, r24
    2302:	f7 cf       	rjmp	.-18     	; 0x22f2 <free+0xc2>
    2304:	8d 91       	ld	r24, X+
    2306:	9c 91       	ld	r25, X
    2308:	11 97       	sbiw	r26, 0x01	; 1
    230a:	9d 01       	movw	r18, r26
    230c:	2e 5f       	subi	r18, 0xFE	; 254
    230e:	3f 4f       	sbci	r19, 0xFF	; 255
    2310:	82 0f       	add	r24, r18
    2312:	93 1f       	adc	r25, r19
    2314:	20 91 8d 30 	lds	r18, 0x308D	; 0x80308d <__brkval>
    2318:	30 91 8e 30 	lds	r19, 0x308E	; 0x80308e <__brkval+0x1>
    231c:	28 17       	cp	r18, r24
    231e:	39 07       	cpc	r19, r25
    2320:	69 f4       	brne	.+26     	; 0x233c <free+0x10c>
    2322:	30 97       	sbiw	r30, 0x00	; 0
    2324:	29 f4       	brne	.+10     	; 0x2330 <free+0x100>
    2326:	10 92 8f 30 	sts	0x308F, r1	; 0x80308f <__flp>
    232a:	10 92 90 30 	sts	0x3090, r1	; 0x803090 <__flp+0x1>
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <free+0x104>
    2330:	12 82       	std	Z+2, r1	; 0x02
    2332:	13 82       	std	Z+3, r1	; 0x03
    2334:	a0 93 8d 30 	sts	0x308D, r26	; 0x80308d <__brkval>
    2338:	b0 93 8e 30 	sts	0x308E, r27	; 0x80308e <__brkval+0x1>
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	08 95       	ret

00002342 <strnlen_P>:
    2342:	fc 01       	movw	r30, r24
    2344:	05 90       	lpm	r0, Z+
    2346:	61 50       	subi	r22, 0x01	; 1
    2348:	70 40       	sbci	r23, 0x00	; 0
    234a:	01 10       	cpse	r0, r1
    234c:	d8 f7       	brcc	.-10     	; 0x2344 <strnlen_P+0x2>
    234e:	80 95       	com	r24
    2350:	90 95       	com	r25
    2352:	8e 0f       	add	r24, r30
    2354:	9f 1f       	adc	r25, r31
    2356:	08 95       	ret

00002358 <memset>:
    2358:	dc 01       	movw	r26, r24
    235a:	01 c0       	rjmp	.+2      	; 0x235e <memset+0x6>
    235c:	6d 93       	st	X+, r22
    235e:	41 50       	subi	r20, 0x01	; 1
    2360:	50 40       	sbci	r21, 0x00	; 0
    2362:	e0 f7       	brcc	.-8      	; 0x235c <memset+0x4>
    2364:	08 95       	ret

00002366 <strnlen>:
    2366:	fc 01       	movw	r30, r24
    2368:	61 50       	subi	r22, 0x01	; 1
    236a:	70 40       	sbci	r23, 0x00	; 0
    236c:	01 90       	ld	r0, Z+
    236e:	01 10       	cpse	r0, r1
    2370:	d8 f7       	brcc	.-10     	; 0x2368 <strnlen+0x2>
    2372:	80 95       	com	r24
    2374:	90 95       	com	r25
    2376:	8e 0f       	add	r24, r30
    2378:	9f 1f       	adc	r25, r31
    237a:	08 95       	ret

0000237c <fputc>:
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	fb 01       	movw	r30, r22
    2386:	23 81       	ldd	r18, Z+3	; 0x03
    2388:	21 fd       	sbrc	r18, 1
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <fputc+0x16>
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	9f ef       	ldi	r25, 0xFF	; 255
    2390:	2c c0       	rjmp	.+88     	; 0x23ea <fputc+0x6e>
    2392:	22 ff       	sbrs	r18, 2
    2394:	16 c0       	rjmp	.+44     	; 0x23c2 <fputc+0x46>
    2396:	46 81       	ldd	r20, Z+6	; 0x06
    2398:	57 81       	ldd	r21, Z+7	; 0x07
    239a:	24 81       	ldd	r18, Z+4	; 0x04
    239c:	35 81       	ldd	r19, Z+5	; 0x05
    239e:	42 17       	cp	r20, r18
    23a0:	53 07       	cpc	r21, r19
    23a2:	44 f4       	brge	.+16     	; 0x23b4 <fputc+0x38>
    23a4:	a0 81       	ld	r26, Z
    23a6:	b1 81       	ldd	r27, Z+1	; 0x01
    23a8:	9d 01       	movw	r18, r26
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
    23ac:	3f 4f       	sbci	r19, 0xFF	; 255
    23ae:	20 83       	st	Z, r18
    23b0:	31 83       	std	Z+1, r19	; 0x01
    23b2:	8c 93       	st	X, r24
    23b4:	26 81       	ldd	r18, Z+6	; 0x06
    23b6:	37 81       	ldd	r19, Z+7	; 0x07
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	26 83       	std	Z+6, r18	; 0x06
    23be:	37 83       	std	Z+7, r19	; 0x07
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <fputc+0x6e>
    23c2:	8b 01       	movw	r16, r22
    23c4:	ec 01       	movw	r28, r24
    23c6:	fb 01       	movw	r30, r22
    23c8:	00 84       	ldd	r0, Z+8	; 0x08
    23ca:	f1 85       	ldd	r31, Z+9	; 0x09
    23cc:	e0 2d       	mov	r30, r0
    23ce:	19 95       	eicall
    23d0:	89 2b       	or	r24, r25
    23d2:	e1 f6       	brne	.-72     	; 0x238c <fputc+0x10>
    23d4:	d8 01       	movw	r26, r16
    23d6:	16 96       	adiw	r26, 0x06	; 6
    23d8:	8d 91       	ld	r24, X+
    23da:	9c 91       	ld	r25, X
    23dc:	17 97       	sbiw	r26, 0x07	; 7
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	16 96       	adiw	r26, 0x06	; 6
    23e2:	8d 93       	st	X+, r24
    23e4:	9c 93       	st	X, r25
    23e6:	17 97       	sbiw	r26, 0x07	; 7
    23e8:	ce 01       	movw	r24, r28
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	08 95       	ret

000023f4 <__ultoa_invert>:
    23f4:	fa 01       	movw	r30, r20
    23f6:	aa 27       	eor	r26, r26
    23f8:	28 30       	cpi	r18, 0x08	; 8
    23fa:	51 f1       	breq	.+84     	; 0x2450 <__ultoa_invert+0x5c>
    23fc:	20 31       	cpi	r18, 0x10	; 16
    23fe:	81 f1       	breq	.+96     	; 0x2460 <__ultoa_invert+0x6c>
    2400:	e8 94       	clt
    2402:	6f 93       	push	r22
    2404:	6e 7f       	andi	r22, 0xFE	; 254
    2406:	6e 5f       	subi	r22, 0xFE	; 254
    2408:	7f 4f       	sbci	r23, 0xFF	; 255
    240a:	8f 4f       	sbci	r24, 0xFF	; 255
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	af 4f       	sbci	r26, 0xFF	; 255
    2410:	b1 e0       	ldi	r27, 0x01	; 1
    2412:	3e d0       	rcall	.+124    	; 0x2490 <__ultoa_invert+0x9c>
    2414:	b4 e0       	ldi	r27, 0x04	; 4
    2416:	3c d0       	rcall	.+120    	; 0x2490 <__ultoa_invert+0x9c>
    2418:	67 0f       	add	r22, r23
    241a:	78 1f       	adc	r23, r24
    241c:	89 1f       	adc	r24, r25
    241e:	9a 1f       	adc	r25, r26
    2420:	a1 1d       	adc	r26, r1
    2422:	68 0f       	add	r22, r24
    2424:	79 1f       	adc	r23, r25
    2426:	8a 1f       	adc	r24, r26
    2428:	91 1d       	adc	r25, r1
    242a:	a1 1d       	adc	r26, r1
    242c:	6a 0f       	add	r22, r26
    242e:	71 1d       	adc	r23, r1
    2430:	81 1d       	adc	r24, r1
    2432:	91 1d       	adc	r25, r1
    2434:	a1 1d       	adc	r26, r1
    2436:	20 d0       	rcall	.+64     	; 0x2478 <__ultoa_invert+0x84>
    2438:	09 f4       	brne	.+2      	; 0x243c <__ultoa_invert+0x48>
    243a:	68 94       	set
    243c:	3f 91       	pop	r19
    243e:	2a e0       	ldi	r18, 0x0A	; 10
    2440:	26 9f       	mul	r18, r22
    2442:	11 24       	eor	r1, r1
    2444:	30 19       	sub	r19, r0
    2446:	30 5d       	subi	r19, 0xD0	; 208
    2448:	31 93       	st	Z+, r19
    244a:	de f6       	brtc	.-74     	; 0x2402 <__ultoa_invert+0xe>
    244c:	cf 01       	movw	r24, r30
    244e:	08 95       	ret
    2450:	46 2f       	mov	r20, r22
    2452:	47 70       	andi	r20, 0x07	; 7
    2454:	40 5d       	subi	r20, 0xD0	; 208
    2456:	41 93       	st	Z+, r20
    2458:	b3 e0       	ldi	r27, 0x03	; 3
    245a:	0f d0       	rcall	.+30     	; 0x247a <__ultoa_invert+0x86>
    245c:	c9 f7       	brne	.-14     	; 0x2450 <__ultoa_invert+0x5c>
    245e:	f6 cf       	rjmp	.-20     	; 0x244c <__ultoa_invert+0x58>
    2460:	46 2f       	mov	r20, r22
    2462:	4f 70       	andi	r20, 0x0F	; 15
    2464:	40 5d       	subi	r20, 0xD0	; 208
    2466:	4a 33       	cpi	r20, 0x3A	; 58
    2468:	18 f0       	brcs	.+6      	; 0x2470 <__ultoa_invert+0x7c>
    246a:	49 5d       	subi	r20, 0xD9	; 217
    246c:	31 fd       	sbrc	r19, 1
    246e:	40 52       	subi	r20, 0x20	; 32
    2470:	41 93       	st	Z+, r20
    2472:	02 d0       	rcall	.+4      	; 0x2478 <__ultoa_invert+0x84>
    2474:	a9 f7       	brne	.-22     	; 0x2460 <__ultoa_invert+0x6c>
    2476:	ea cf       	rjmp	.-44     	; 0x244c <__ultoa_invert+0x58>
    2478:	b4 e0       	ldi	r27, 0x04	; 4
    247a:	a6 95       	lsr	r26
    247c:	97 95       	ror	r25
    247e:	87 95       	ror	r24
    2480:	77 95       	ror	r23
    2482:	67 95       	ror	r22
    2484:	ba 95       	dec	r27
    2486:	c9 f7       	brne	.-14     	; 0x247a <__ultoa_invert+0x86>
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	61 05       	cpc	r22, r1
    248c:	71 05       	cpc	r23, r1
    248e:	08 95       	ret
    2490:	9b 01       	movw	r18, r22
    2492:	ac 01       	movw	r20, r24
    2494:	0a 2e       	mov	r0, r26
    2496:	06 94       	lsr	r0
    2498:	57 95       	ror	r21
    249a:	47 95       	ror	r20
    249c:	37 95       	ror	r19
    249e:	27 95       	ror	r18
    24a0:	ba 95       	dec	r27
    24a2:	c9 f7       	brne	.-14     	; 0x2496 <__ultoa_invert+0xa2>
    24a4:	62 0f       	add	r22, r18
    24a6:	73 1f       	adc	r23, r19
    24a8:	84 1f       	adc	r24, r20
    24aa:	95 1f       	adc	r25, r21
    24ac:	a0 1d       	adc	r26, r0
    24ae:	08 95       	ret

000024b0 <_exit>:
    24b0:	f8 94       	cli

000024b2 <__stop_program>:
    24b2:	ff cf       	rjmp	.-2      	; 0x24b2 <__stop_program>
